/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddMembersToZSetDto } from '../models';
// @ts-ignore
import type { CreateZSetWithExpireDto } from '../models';
// @ts-ignore
import type { DeleteMembersFromZSetDto } from '../models';
// @ts-ignore
import type { DeleteMembersFromZSetResponse } from '../models';
// @ts-ignore
import type { GetZSetMembersDto } from '../models';
// @ts-ignore
import type { GetZSetResponse } from '../models';
// @ts-ignore
import type { SearchZSetMembersDto } from '../models';
// @ts-ignore
import type { SearchZSetMembersResponse } from '../models';
// @ts-ignore
import type { UpdateMemberInZSetDto } from '../models';
/**
 * BrowserZSetApi - axios parameter creator
 * @export
 */
export const BrowserZSetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add the specified members to the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToZSetDto} addMembersToZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerAddMembers: async (dbInstance: string, encoding: ZSetControllerAddMembersEncodingEnum, addMembersToZSetDto: AddMembersToZSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerAddMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerAddMembers', 'encoding', encoding)
            // verify required parameter 'addMembersToZSetDto' is not null or undefined
            assertParamExists('zSetControllerAddMembers', 'addMembersToZSetDto', addMembersToZSetDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMembersToZSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set key to hold ZSet data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateZSetWithExpireDto} createZSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerCreateSet: async (dbInstance: string, encoding: ZSetControllerCreateSetEncodingEnum, createZSetWithExpireDto: CreateZSetWithExpireDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerCreateSet', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerCreateSet', 'encoding', encoding)
            // verify required parameter 'createZSetWithExpireDto' is not null or undefined
            assertParamExists('zSetControllerCreateSet', 'createZSetWithExpireDto', createZSetWithExpireDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createZSetWithExpireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromZSetDto} deleteMembersFromZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerDeleteMembers: async (dbInstance: string, encoding: ZSetControllerDeleteMembersEncodingEnum, deleteMembersFromZSetDto: DeleteMembersFromZSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerDeleteMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerDeleteMembers', 'encoding', encoding)
            // verify required parameter 'deleteMembersFromZSetDto' is not null or undefined
            assertParamExists('zSetControllerDeleteMembers', 'deleteMembersFromZSetDto', deleteMembersFromZSetDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet/members`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMembersFromZSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get specified members of the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerGetZSetEncodingEnum} encoding 
         * @param {GetZSetMembersDto} getZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerGetZSet: async (dbInstance: string, encoding: ZSetControllerGetZSetEncodingEnum, getZSetMembersDto: GetZSetMembersDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerGetZSet', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerGetZSet', 'encoding', encoding)
            // verify required parameter 'getZSetMembersDto' is not null or undefined
            assertParamExists('zSetControllerGetZSet', 'getZSetMembersDto', getZSetMembersDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet/get-members`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getZSetMembersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search members in ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerSearchZSetEncodingEnum} encoding 
         * @param {SearchZSetMembersDto} searchZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerSearchZSet: async (dbInstance: string, encoding: ZSetControllerSearchZSetEncodingEnum, searchZSetMembersDto: SearchZSetMembersDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerSearchZSet', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerSearchZSet', 'encoding', encoding)
            // verify required parameter 'searchZSetMembersDto' is not null or undefined
            assertParamExists('zSetControllerSearchZSet', 'searchZSetMembersDto', searchZSetMembersDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet/search`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchZSetMembersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the specified member in the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerUpdateMemberEncodingEnum} encoding 
         * @param {UpdateMemberInZSetDto} updateMemberInZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerUpdateMember: async (dbInstance: string, encoding: ZSetControllerUpdateMemberEncodingEnum, updateMemberInZSetDto: UpdateMemberInZSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('zSetControllerUpdateMember', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('zSetControllerUpdateMember', 'encoding', encoding)
            // verify required parameter 'updateMemberInZSetDto' is not null or undefined
            assertParamExists('zSetControllerUpdateMember', 'updateMemberInZSetDto', updateMemberInZSetDto)
            const localVarPath = `/api/databases/{dbInstance}/zSet`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMemberInZSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserZSetApi - functional programming interface
 * @export
 */
export const BrowserZSetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserZSetApiAxiosParamCreator(configuration)
    return {
        /**
         * Add the specified members to the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToZSetDto} addMembersToZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerAddMembers(dbInstance: string, encoding: ZSetControllerAddMembersEncodingEnum, addMembersToZSetDto: AddMembersToZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerAddMembers(dbInstance, encoding, addMembersToZSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerAddMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set key to hold ZSet data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateZSetWithExpireDto} createZSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerCreateSet(dbInstance: string, encoding: ZSetControllerCreateSetEncodingEnum, createZSetWithExpireDto: CreateZSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerCreateSet(dbInstance, encoding, createZSetWithExpireDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerCreateSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromZSetDto} deleteMembersFromZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerDeleteMembers(dbInstance: string, encoding: ZSetControllerDeleteMembersEncodingEnum, deleteMembersFromZSetDto: DeleteMembersFromZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMembersFromZSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerDeleteMembers(dbInstance, encoding, deleteMembersFromZSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerDeleteMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get specified members of the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerGetZSetEncodingEnum} encoding 
         * @param {GetZSetMembersDto} getZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerGetZSet(dbInstance: string, encoding: ZSetControllerGetZSetEncodingEnum, getZSetMembersDto: GetZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetZSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerGetZSet(dbInstance, encoding, getZSetMembersDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerGetZSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search members in ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerSearchZSetEncodingEnum} encoding 
         * @param {SearchZSetMembersDto} searchZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerSearchZSet(dbInstance: string, encoding: ZSetControllerSearchZSetEncodingEnum, searchZSetMembersDto: SearchZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchZSetMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerSearchZSet(dbInstance, encoding, searchZSetMembersDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerSearchZSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the specified member in the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerUpdateMemberEncodingEnum} encoding 
         * @param {UpdateMemberInZSetDto} updateMemberInZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zSetControllerUpdateMember(dbInstance: string, encoding: ZSetControllerUpdateMemberEncodingEnum, updateMemberInZSetDto: UpdateMemberInZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.zSetControllerUpdateMember(dbInstance, encoding, updateMemberInZSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserZSetApi.zSetControllerUpdateMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserZSetApi - factory interface
 * @export
 */
export const BrowserZSetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserZSetApiFp(configuration)
    return {
        /**
         * Add the specified members to the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToZSetDto} addMembersToZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerAddMembers(dbInstance: string, encoding: ZSetControllerAddMembersEncodingEnum, addMembersToZSetDto: AddMembersToZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.zSetControllerAddMembers(dbInstance, encoding, addMembersToZSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Set key to hold ZSet data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateZSetWithExpireDto} createZSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerCreateSet(dbInstance: string, encoding: ZSetControllerCreateSetEncodingEnum, createZSetWithExpireDto: CreateZSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.zSetControllerCreateSet(dbInstance, encoding, createZSetWithExpireDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromZSetDto} deleteMembersFromZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerDeleteMembers(dbInstance: string, encoding: ZSetControllerDeleteMembersEncodingEnum, deleteMembersFromZSetDto: DeleteMembersFromZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteMembersFromZSetResponse> {
            return localVarFp.zSetControllerDeleteMembers(dbInstance, encoding, deleteMembersFromZSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get specified members of the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerGetZSetEncodingEnum} encoding 
         * @param {GetZSetMembersDto} getZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerGetZSet(dbInstance: string, encoding: ZSetControllerGetZSetEncodingEnum, getZSetMembersDto: GetZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetZSetResponse> {
            return localVarFp.zSetControllerGetZSet(dbInstance, encoding, getZSetMembersDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Search members in ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerSearchZSetEncodingEnum} encoding 
         * @param {SearchZSetMembersDto} searchZSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerSearchZSet(dbInstance: string, encoding: ZSetControllerSearchZSetEncodingEnum, searchZSetMembersDto: SearchZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<SearchZSetMembersResponse> {
            return localVarFp.zSetControllerSearchZSet(dbInstance, encoding, searchZSetMembersDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the specified member in the ZSet stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ZSetControllerUpdateMemberEncodingEnum} encoding 
         * @param {UpdateMemberInZSetDto} updateMemberInZSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zSetControllerUpdateMember(dbInstance: string, encoding: ZSetControllerUpdateMemberEncodingEnum, updateMemberInZSetDto: UpdateMemberInZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.zSetControllerUpdateMember(dbInstance, encoding, updateMemberInZSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserZSetApi - object-oriented interface
 * @export
 * @class BrowserZSetApi
 * @extends {BaseAPI}
 */
export class BrowserZSetApi extends BaseAPI {
    /**
     * Add the specified members to the ZSet stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerAddMembersEncodingEnum} encoding 
     * @param {AddMembersToZSetDto} addMembersToZSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerAddMembers(dbInstance: string, encoding: ZSetControllerAddMembersEncodingEnum, addMembersToZSetDto: AddMembersToZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerAddMembers(dbInstance, encoding, addMembersToZSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set key to hold ZSet data type
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerCreateSetEncodingEnum} encoding 
     * @param {CreateZSetWithExpireDto} createZSetWithExpireDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerCreateSet(dbInstance: string, encoding: ZSetControllerCreateSetEncodingEnum, createZSetWithExpireDto: CreateZSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerCreateSet(dbInstance, encoding, createZSetWithExpireDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified members from the Set stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerDeleteMembersEncodingEnum} encoding 
     * @param {DeleteMembersFromZSetDto} deleteMembersFromZSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerDeleteMembers(dbInstance: string, encoding: ZSetControllerDeleteMembersEncodingEnum, deleteMembersFromZSetDto: DeleteMembersFromZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerDeleteMembers(dbInstance, encoding, deleteMembersFromZSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get specified members of the ZSet stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerGetZSetEncodingEnum} encoding 
     * @param {GetZSetMembersDto} getZSetMembersDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerGetZSet(dbInstance: string, encoding: ZSetControllerGetZSetEncodingEnum, getZSetMembersDto: GetZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerGetZSet(dbInstance, encoding, getZSetMembersDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search members in ZSet stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerSearchZSetEncodingEnum} encoding 
     * @param {SearchZSetMembersDto} searchZSetMembersDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerSearchZSet(dbInstance: string, encoding: ZSetControllerSearchZSetEncodingEnum, searchZSetMembersDto: SearchZSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerSearchZSet(dbInstance, encoding, searchZSetMembersDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the specified member in the ZSet stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ZSetControllerUpdateMemberEncodingEnum} encoding 
     * @param {UpdateMemberInZSetDto} updateMemberInZSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserZSetApi
     */
    public zSetControllerUpdateMember(dbInstance: string, encoding: ZSetControllerUpdateMemberEncodingEnum, updateMemberInZSetDto: UpdateMemberInZSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserZSetApiFp(this.configuration).zSetControllerUpdateMember(dbInstance, encoding, updateMemberInZSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ZSetControllerAddMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerAddMembersEncodingEnum = typeof ZSetControllerAddMembersEncodingEnum[keyof typeof ZSetControllerAddMembersEncodingEnum];
/**
 * @export
 */
export const ZSetControllerCreateSetEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerCreateSetEncodingEnum = typeof ZSetControllerCreateSetEncodingEnum[keyof typeof ZSetControllerCreateSetEncodingEnum];
/**
 * @export
 */
export const ZSetControllerDeleteMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerDeleteMembersEncodingEnum = typeof ZSetControllerDeleteMembersEncodingEnum[keyof typeof ZSetControllerDeleteMembersEncodingEnum];
/**
 * @export
 */
export const ZSetControllerGetZSetEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerGetZSetEncodingEnum = typeof ZSetControllerGetZSetEncodingEnum[keyof typeof ZSetControllerGetZSetEncodingEnum];
/**
 * @export
 */
export const ZSetControllerSearchZSetEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerSearchZSetEncodingEnum = typeof ZSetControllerSearchZSetEncodingEnum[keyof typeof ZSetControllerSearchZSetEncodingEnum];
/**
 * @export
 */
export const ZSetControllerUpdateMemberEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ZSetControllerUpdateMemberEncodingEnum = typeof ZSetControllerUpdateMemberEncodingEnum[keyof typeof ZSetControllerUpdateMemberEncodingEnum];
