/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DatabaseOverview } from '../models';
// @ts-ignore
import type { RedisDatabaseInfoResponse } from '../models';
/**
 * DatabaseInstancesApi - axios parameter creator
 * @export
 */
export const DatabaseInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Try to create connection to specified database index
         * @summary 
         * @param {object} index 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetDatabaseIndex: async (index: object, id: string, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index' is not null or undefined
            assertParamExists('databaseInfoControllerGetDatabaseIndex', 'index', index)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseInfoControllerGetDatabaseIndex', 'id', id)
            const localVarPath = `/api/databases/{id}/db/{index}`
                .replace(`{${"index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Redis database overview
         * @summary 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum} [keyspace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetDatabaseOverview: async (id: string, riDbIndex?: number, keyspace?: DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseInfoControllerGetDatabaseOverview', 'id', id)
            const localVarPath = `/api/databases/{id}/overview`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyspace !== undefined) {
                localVarQueryParameter['keyspace'] = keyspace;
            }


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Redis database config info
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetInfo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseInfoControllerGetInfo', 'id', id)
            const localVarPath = `/api/databases/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseInstancesApi - functional programming interface
 * @export
 */
export const DatabaseInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Try to create connection to specified database index
         * @summary 
         * @param {object} index 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseInfoControllerGetDatabaseIndex(index: object, id: string, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseInfoControllerGetDatabaseIndex(index, id, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseInstancesApi.databaseInfoControllerGetDatabaseIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Redis database overview
         * @summary 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum} [keyspace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseInfoControllerGetDatabaseOverview(id: string, riDbIndex?: number, keyspace?: DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseOverview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseInfoControllerGetDatabaseOverview(id, riDbIndex, keyspace, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseInstancesApi.databaseInfoControllerGetDatabaseOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Redis database config info
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseInfoControllerGetInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedisDatabaseInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseInfoControllerGetInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseInstancesApi.databaseInfoControllerGetInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DatabaseInstancesApi - factory interface
 * @export
 */
export const DatabaseInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseInstancesApiFp(configuration)
    return {
        /**
         * Try to create connection to specified database index
         * @summary 
         * @param {object} index 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetDatabaseIndex(index: object, id: string, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseInfoControllerGetDatabaseIndex(index, id, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Redis database overview
         * @summary 
         * @param {string} id 
         * @param {number} [riDbIndex] 
         * @param {DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum} [keyspace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetDatabaseOverview(id: string, riDbIndex?: number, keyspace?: DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseOverview> {
            return localVarFp.databaseInfoControllerGetDatabaseOverview(id, riDbIndex, keyspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Redis database config info
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseInfoControllerGetInfo(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RedisDatabaseInfoResponse> {
            return localVarFp.databaseInfoControllerGetInfo(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseInstancesApi - object-oriented interface
 * @export
 * @class DatabaseInstancesApi
 * @extends {BaseAPI}
 */
export class DatabaseInstancesApi extends BaseAPI {
    /**
     * Try to create connection to specified database index
     * @summary 
     * @param {object} index 
     * @param {string} id 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseInstancesApi
     */
    public databaseInfoControllerGetDatabaseIndex(index: object, id: string, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseInstancesApiFp(this.configuration).databaseInfoControllerGetDatabaseIndex(index, id, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Redis database overview
     * @summary 
     * @param {string} id 
     * @param {number} [riDbIndex] 
     * @param {DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum} [keyspace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseInstancesApi
     */
    public databaseInfoControllerGetDatabaseOverview(id: string, riDbIndex?: number, keyspace?: DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum, options?: RawAxiosRequestConfig) {
        return DatabaseInstancesApiFp(this.configuration).databaseInfoControllerGetDatabaseOverview(id, riDbIndex, keyspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Redis database config info
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseInstancesApi
     */
    public databaseInfoControllerGetInfo(id: string, options?: RawAxiosRequestConfig) {
        return DatabaseInstancesApiFp(this.configuration).databaseInfoControllerGetInfo(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum = {
    Full: 'full',
    Current: 'current'
} as const;
export type DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum = typeof DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum[keyof typeof DatabaseInfoControllerGetDatabaseOverviewKeyspaceEnum];
