/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BrowserHistory } from '../models';
// @ts-ignore
import type { DeleteBrowserHistoryItemsDto } from '../models';
// @ts-ignore
import type { DeleteBrowserHistoryItemsResponse } from '../models';
/**
 * BrowserBrowserHistoryApi - axios parameter creator
 * @export
 */
export const BrowserBrowserHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete bulk browser history items
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {DeleteBrowserHistoryItemsDto} deleteBrowserHistoryItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerBulkDelete: async (dbInstance: string, mode: string, deleteBrowserHistoryItemsDto: DeleteBrowserHistoryItemsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('browserHistoryControllerBulkDelete', 'dbInstance', dbInstance)
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('browserHistoryControllerBulkDelete', 'mode', mode)
            // verify required parameter 'deleteBrowserHistoryItemsDto' is not null or undefined
            assertParamExists('browserHistoryControllerBulkDelete', 'deleteBrowserHistoryItemsDto', deleteBrowserHistoryItemsDto)
            const localVarPath = `/api/databases/{dbInstance}/history`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBrowserHistoryItemsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete browser history item by id
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerDelete: async (dbInstance: string, mode: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('browserHistoryControllerDelete', 'dbInstance', dbInstance)
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('browserHistoryControllerDelete', 'mode', mode)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('browserHistoryControllerDelete', 'id', id)
            const localVarPath = `/api/databases/{dbInstance}/history/{id}`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get browser history
         * @summary 
         * @param {string} dbInstance 
         * @param {BrowserHistoryControllerListModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerList: async (dbInstance: string, mode: BrowserHistoryControllerListModeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('browserHistoryControllerList', 'dbInstance', dbInstance)
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('browserHistoryControllerList', 'mode', mode)
            const localVarPath = `/api/databases/{dbInstance}/history`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserBrowserHistoryApi - functional programming interface
 * @export
 */
export const BrowserBrowserHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserBrowserHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete bulk browser history items
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {DeleteBrowserHistoryItemsDto} deleteBrowserHistoryItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async browserHistoryControllerBulkDelete(dbInstance: string, mode: string, deleteBrowserHistoryItemsDto: DeleteBrowserHistoryItemsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBrowserHistoryItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.browserHistoryControllerBulkDelete(dbInstance, mode, deleteBrowserHistoryItemsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserBrowserHistoryApi.browserHistoryControllerBulkDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete browser history item by id
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async browserHistoryControllerDelete(dbInstance: string, mode: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.browserHistoryControllerDelete(dbInstance, mode, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserBrowserHistoryApi.browserHistoryControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get browser history
         * @summary 
         * @param {string} dbInstance 
         * @param {BrowserHistoryControllerListModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async browserHistoryControllerList(dbInstance: string, mode: BrowserHistoryControllerListModeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrowserHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.browserHistoryControllerList(dbInstance, mode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserBrowserHistoryApi.browserHistoryControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserBrowserHistoryApi - factory interface
 * @export
 */
export const BrowserBrowserHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserBrowserHistoryApiFp(configuration)
    return {
        /**
         * Delete bulk browser history items
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {DeleteBrowserHistoryItemsDto} deleteBrowserHistoryItemsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerBulkDelete(dbInstance: string, mode: string, deleteBrowserHistoryItemsDto: DeleteBrowserHistoryItemsDto, options?: RawAxiosRequestConfig): AxiosPromise<DeleteBrowserHistoryItemsResponse> {
            return localVarFp.browserHistoryControllerBulkDelete(dbInstance, mode, deleteBrowserHistoryItemsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete browser history item by id
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} mode Search mode
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerDelete(dbInstance: string, mode: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.browserHistoryControllerDelete(dbInstance, mode, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get browser history
         * @summary 
         * @param {string} dbInstance 
         * @param {BrowserHistoryControllerListModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browserHistoryControllerList(dbInstance: string, mode: BrowserHistoryControllerListModeEnum, options?: RawAxiosRequestConfig): AxiosPromise<BrowserHistory> {
            return localVarFp.browserHistoryControllerList(dbInstance, mode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserBrowserHistoryApi - object-oriented interface
 * @export
 * @class BrowserBrowserHistoryApi
 * @extends {BaseAPI}
 */
export class BrowserBrowserHistoryApi extends BaseAPI {
    /**
     * Delete bulk browser history items
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} mode Search mode
     * @param {DeleteBrowserHistoryItemsDto} deleteBrowserHistoryItemsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserBrowserHistoryApi
     */
    public browserHistoryControllerBulkDelete(dbInstance: string, mode: string, deleteBrowserHistoryItemsDto: DeleteBrowserHistoryItemsDto, options?: RawAxiosRequestConfig) {
        return BrowserBrowserHistoryApiFp(this.configuration).browserHistoryControllerBulkDelete(dbInstance, mode, deleteBrowserHistoryItemsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete browser history item by id
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} mode Search mode
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserBrowserHistoryApi
     */
    public browserHistoryControllerDelete(dbInstance: string, mode: string, id: string, options?: RawAxiosRequestConfig) {
        return BrowserBrowserHistoryApiFp(this.configuration).browserHistoryControllerDelete(dbInstance, mode, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get browser history
     * @summary 
     * @param {string} dbInstance 
     * @param {BrowserHistoryControllerListModeEnum} mode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserBrowserHistoryApi
     */
    public browserHistoryControllerList(dbInstance: string, mode: BrowserHistoryControllerListModeEnum, options?: RawAxiosRequestConfig) {
        return BrowserBrowserHistoryApiFp(this.configuration).browserHistoryControllerList(dbInstance, mode, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const BrowserHistoryControllerListModeEnum = {
    Pattern: 'pattern',
    Redisearch: 'redisearch'
} as const;
export type BrowserHistoryControllerListModeEnum = typeof BrowserHistoryControllerListModeEnum[keyof typeof BrowserHistoryControllerListModeEnum];
