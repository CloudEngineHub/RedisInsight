/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRedisearchIndexDto } from '../models';
// @ts-ignore
import type { GetKeysWithDetailsResponse } from '../models';
// @ts-ignore
import type { IndexInfoDto } from '../models';
// @ts-ignore
import type { IndexInfoRequestBodyDto } from '../models';
// @ts-ignore
import type { ListRedisearchIndexesResponse } from '../models';
// @ts-ignore
import type { SearchRedisearchDto } from '../models';
/**
 * BrowserRediSearchApi - axios parameter creator
 * @export
 */
export const BrowserRediSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create redisearch index
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRedisearchIndexDto} createRedisearchIndexDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerCreateIndex: async (dbInstance: string, createRedisearchIndexDto: CreateRedisearchIndexDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('redisearchControllerCreateIndex', 'dbInstance', dbInstance)
            // verify required parameter 'createRedisearchIndexDto' is not null or undefined
            assertParamExists('redisearchControllerCreateIndex', 'createRedisearchIndexDto', createRedisearchIndexDto)
            const localVarPath = `/api/databases/{dbInstance}/redisearch`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRedisearchIndexDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get index info
         * @summary 
         * @param {string} dbInstance 
         * @param {IndexInfoRequestBodyDto} indexInfoRequestBodyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerInfo: async (dbInstance: string, indexInfoRequestBodyDto: IndexInfoRequestBodyDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('redisearchControllerInfo', 'dbInstance', dbInstance)
            // verify required parameter 'indexInfoRequestBodyDto' is not null or undefined
            assertParamExists('redisearchControllerInfo', 'indexInfoRequestBodyDto', indexInfoRequestBodyDto)
            const localVarPath = `/api/databases/{dbInstance}/redisearch/info`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(indexInfoRequestBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of available indexes
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerListEncodingEnum} encoding 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerList: async (dbInstance: string, encoding: RedisearchControllerListEncodingEnum, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('redisearchControllerList', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('redisearchControllerList', 'encoding', encoding)
            const localVarPath = `/api/databases/{dbInstance}/redisearch`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for keys in index
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerSearchEncodingEnum} encoding 
         * @param {SearchRedisearchDto} searchRedisearchDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerSearch: async (dbInstance: string, encoding: RedisearchControllerSearchEncodingEnum, searchRedisearchDto: SearchRedisearchDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('redisearchControllerSearch', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('redisearchControllerSearch', 'encoding', encoding)
            // verify required parameter 'searchRedisearchDto' is not null or undefined
            assertParamExists('redisearchControllerSearch', 'searchRedisearchDto', searchRedisearchDto)
            const localVarPath = `/api/databases/{dbInstance}/redisearch/search`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRedisearchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserRediSearchApi - functional programming interface
 * @export
 */
export const BrowserRediSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserRediSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Create redisearch index
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRedisearchIndexDto} createRedisearchIndexDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redisearchControllerCreateIndex(dbInstance: string, createRedisearchIndexDto: CreateRedisearchIndexDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redisearchControllerCreateIndex(dbInstance, createRedisearchIndexDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserRediSearchApi.redisearchControllerCreateIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get index info
         * @summary 
         * @param {string} dbInstance 
         * @param {IndexInfoRequestBodyDto} indexInfoRequestBodyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redisearchControllerInfo(dbInstance: string, indexInfoRequestBodyDto: IndexInfoRequestBodyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redisearchControllerInfo(dbInstance, indexInfoRequestBodyDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserRediSearchApi.redisearchControllerInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of available indexes
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerListEncodingEnum} encoding 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redisearchControllerList(dbInstance: string, encoding: RedisearchControllerListEncodingEnum, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRedisearchIndexesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redisearchControllerList(dbInstance, encoding, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserRediSearchApi.redisearchControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for keys in index
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerSearchEncodingEnum} encoding 
         * @param {SearchRedisearchDto} searchRedisearchDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redisearchControllerSearch(dbInstance: string, encoding: RedisearchControllerSearchEncodingEnum, searchRedisearchDto: SearchRedisearchDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeysWithDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redisearchControllerSearch(dbInstance, encoding, searchRedisearchDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserRediSearchApi.redisearchControllerSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserRediSearchApi - factory interface
 * @export
 */
export const BrowserRediSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserRediSearchApiFp(configuration)
    return {
        /**
         * Create redisearch index
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRedisearchIndexDto} createRedisearchIndexDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerCreateIndex(dbInstance: string, createRedisearchIndexDto: CreateRedisearchIndexDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.redisearchControllerCreateIndex(dbInstance, createRedisearchIndexDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get index info
         * @summary 
         * @param {string} dbInstance 
         * @param {IndexInfoRequestBodyDto} indexInfoRequestBodyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerInfo(dbInstance: string, indexInfoRequestBodyDto: IndexInfoRequestBodyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<IndexInfoDto> {
            return localVarFp.redisearchControllerInfo(dbInstance, indexInfoRequestBodyDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of available indexes
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerListEncodingEnum} encoding 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerList(dbInstance: string, encoding: RedisearchControllerListEncodingEnum, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListRedisearchIndexesResponse> {
            return localVarFp.redisearchControllerList(dbInstance, encoding, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for keys in index
         * @summary 
         * @param {string} dbInstance 
         * @param {RedisearchControllerSearchEncodingEnum} encoding 
         * @param {SearchRedisearchDto} searchRedisearchDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisearchControllerSearch(dbInstance: string, encoding: RedisearchControllerSearchEncodingEnum, searchRedisearchDto: SearchRedisearchDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetKeysWithDetailsResponse> {
            return localVarFp.redisearchControllerSearch(dbInstance, encoding, searchRedisearchDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserRediSearchApi - object-oriented interface
 * @export
 * @class BrowserRediSearchApi
 * @extends {BaseAPI}
 */
export class BrowserRediSearchApi extends BaseAPI {
    /**
     * Create redisearch index
     * @summary 
     * @param {string} dbInstance 
     * @param {CreateRedisearchIndexDto} createRedisearchIndexDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserRediSearchApi
     */
    public redisearchControllerCreateIndex(dbInstance: string, createRedisearchIndexDto: CreateRedisearchIndexDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserRediSearchApiFp(this.configuration).redisearchControllerCreateIndex(dbInstance, createRedisearchIndexDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get index info
     * @summary 
     * @param {string} dbInstance 
     * @param {IndexInfoRequestBodyDto} indexInfoRequestBodyDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserRediSearchApi
     */
    public redisearchControllerInfo(dbInstance: string, indexInfoRequestBodyDto: IndexInfoRequestBodyDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserRediSearchApiFp(this.configuration).redisearchControllerInfo(dbInstance, indexInfoRequestBodyDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of available indexes
     * @summary 
     * @param {string} dbInstance 
     * @param {RedisearchControllerListEncodingEnum} encoding 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserRediSearchApi
     */
    public redisearchControllerList(dbInstance: string, encoding: RedisearchControllerListEncodingEnum, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserRediSearchApiFp(this.configuration).redisearchControllerList(dbInstance, encoding, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for keys in index
     * @summary 
     * @param {string} dbInstance 
     * @param {RedisearchControllerSearchEncodingEnum} encoding 
     * @param {SearchRedisearchDto} searchRedisearchDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserRediSearchApi
     */
    public redisearchControllerSearch(dbInstance: string, encoding: RedisearchControllerSearchEncodingEnum, searchRedisearchDto: SearchRedisearchDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserRediSearchApiFp(this.configuration).redisearchControllerSearch(dbInstance, encoding, searchRedisearchDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const RedisearchControllerListEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type RedisearchControllerListEncodingEnum = typeof RedisearchControllerListEncodingEnum[keyof typeof RedisearchControllerListEncodingEnum];
/**
 * @export
 */
export const RedisearchControllerSearchEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type RedisearchControllerSearchEncodingEnum = typeof RedisearchControllerSearchEncodingEnum[keyof typeof RedisearchControllerSearchEncodingEnum];
