/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloudJobInfo } from '../models';
// @ts-ignore
import type { CreateCloudJobDto } from '../models';
/**
 * CloudJobsApi - axios parameter creator
 * @export
 */
export const CloudJobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create cloud job
         * @summary 
         * @param {CreateCloudJobDto} createCloudJobDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerCreateFreeDatabase: async (createCloudJobDto: CreateCloudJobDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCloudJobDto' is not null or undefined
            assertParamExists('cloudJobControllerCreateFreeDatabase', 'createCloudJobDto', createCloudJobDto)
            const localVarPath = `/api/cloud/me/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }

            if (campaign !== undefined) {
                localVarQueryParameter['campaign'] = campaign;
            }

            if (amp !== undefined) {
                localVarQueryParameter['amp'] = amp;
            }

            if (_package !== undefined) {
                localVarQueryParameter['package'] = _package;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCloudJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user jobs
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerGetJobInfo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudJobControllerGetJobInfo', 'id', id)
            const localVarPath = `/api/cloud/me/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of user jobs
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerGetUserJobsInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/me/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudJobsApi - functional programming interface
 * @export
 */
export const CloudJobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudJobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create cloud job
         * @summary 
         * @param {CreateCloudJobDto} createCloudJobDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudJobControllerCreateFreeDatabase(createCloudJobDto: CreateCloudJobDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJobInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudJobControllerCreateFreeDatabase(createCloudJobDto, source, medium, campaign, amp, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudJobsApi.cloudJobControllerCreateFreeDatabase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user jobs
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudJobControllerGetJobInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudJobInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudJobControllerGetJobInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudJobsApi.cloudJobControllerGetJobInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of user jobs
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudJobControllerGetUserJobsInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudJobInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudJobControllerGetUserJobsInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudJobsApi.cloudJobControllerGetUserJobsInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudJobsApi - factory interface
 * @export
 */
export const CloudJobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudJobsApiFp(configuration)
    return {
        /**
         * Create cloud job
         * @summary 
         * @param {CreateCloudJobDto} createCloudJobDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerCreateFreeDatabase(createCloudJobDto: CreateCloudJobDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudJobInfo> {
            return localVarFp.cloudJobControllerCreateFreeDatabase(createCloudJobDto, source, medium, campaign, amp, _package, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user jobs
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerGetJobInfo(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudJobInfo> {
            return localVarFp.cloudJobControllerGetJobInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of user jobs
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudJobControllerGetUserJobsInfo(options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudJobInfo>> {
            return localVarFp.cloudJobControllerGetUserJobsInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudJobsApi - object-oriented interface
 * @export
 * @class CloudJobsApi
 * @extends {BaseAPI}
 */
export class CloudJobsApi extends BaseAPI {
    /**
     * Create cloud job
     * @summary 
     * @param {CreateCloudJobDto} createCloudJobDto 
     * @param {string} [source] 
     * @param {string} [medium] 
     * @param {string} [campaign] 
     * @param {string} [amp] 
     * @param {string} [_package] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudJobsApi
     */
    public cloudJobControllerCreateFreeDatabase(createCloudJobDto: CreateCloudJobDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig) {
        return CloudJobsApiFp(this.configuration).cloudJobControllerCreateFreeDatabase(createCloudJobDto, source, medium, campaign, amp, _package, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user jobs
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudJobsApi
     */
    public cloudJobControllerGetJobInfo(id: string, options?: RawAxiosRequestConfig) {
        return CloudJobsApiFp(this.configuration).cloudJobControllerGetJobInfo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of user jobs
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudJobsApi
     */
    public cloudJobControllerGetUserJobsInfo(options?: RawAxiosRequestConfig) {
        return CloudJobsApiFp(this.configuration).cloudJobControllerGetUserJobsInfo(options).then((request) => request(this.axios, this.basePath));
    }
}

