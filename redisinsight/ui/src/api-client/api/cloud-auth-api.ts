/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloudAuthResponse } from '../models';
/**
 * CloudAuthApi - axios parameter creator
 * @export
 */
export const CloudAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OAuth callback endpoint for handling OAuth authorization code flow
         * @summary 
         * @param {string} [code] Authorization code from OAuth provider
         * @param {string} [state] State parameter to prevent CSRF attacks
         * @param {string} [error] Error code if OAuth flow failed
         * @param {string} [errorDescription] Human-readable error description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAuthControllerCallback: async (code?: string, state?: string, error?: string, errorDescription?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/auth/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (errorDescription !== undefined) {
                localVarQueryParameter['error_description'] = errorDescription;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudAuthApi - functional programming interface
 * @export
 */
export const CloudAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * OAuth callback endpoint for handling OAuth authorization code flow
         * @summary 
         * @param {string} [code] Authorization code from OAuth provider
         * @param {string} [state] State parameter to prevent CSRF attacks
         * @param {string} [error] Error code if OAuth flow failed
         * @param {string} [errorDescription] Human-readable error description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudAuthControllerCallback(code?: string, state?: string, error?: string, errorDescription?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudAuthControllerCallback(code, state, error, errorDescription, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAuthApi.cloudAuthControllerCallback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudAuthApi - factory interface
 * @export
 */
export const CloudAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudAuthApiFp(configuration)
    return {
        /**
         * OAuth callback endpoint for handling OAuth authorization code flow
         * @summary 
         * @param {string} [code] Authorization code from OAuth provider
         * @param {string} [state] State parameter to prevent CSRF attacks
         * @param {string} [error] Error code if OAuth flow failed
         * @param {string} [errorDescription] Human-readable error description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAuthControllerCallback(code?: string, state?: string, error?: string, errorDescription?: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudAuthResponse> {
            return localVarFp.cloudAuthControllerCallback(code, state, error, errorDescription, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudAuthApi - object-oriented interface
 * @export
 * @class CloudAuthApi
 * @extends {BaseAPI}
 */
export class CloudAuthApi extends BaseAPI {
    /**
     * OAuth callback endpoint for handling OAuth authorization code flow
     * @summary 
     * @param {string} [code] Authorization code from OAuth provider
     * @param {string} [state] State parameter to prevent CSRF attacks
     * @param {string} [error] Error code if OAuth flow failed
     * @param {string} [errorDescription] Human-readable error description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAuthApi
     */
    public cloudAuthControllerCallback(code?: string, state?: string, error?: string, errorDescription?: string, options?: RawAxiosRequestConfig) {
        return CloudAuthApiFp(this.configuration).cloudAuthControllerCallback(code, state, error, errorDescription, options).then((request) => request(this.axios, this.basePath));
    }
}

