/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CaCertificate } from '../models';
// @ts-ignore
import type { ClientCertificate } from '../models';
/**
 * TLSCertificatesApi - axios parameter creator
 * @export
 */
export const TLSCertificatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Ca Certificate by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caCertificateControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('caCertificateControllerDelete', 'id', id)
            const localVarPath = `/api/certificates/ca/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Ca Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caCertificateControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificates/ca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Client Certificate pair by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientCertificateControllerDeleteClientCertificatePair: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientCertificateControllerDeleteClientCertificatePair', 'id', id)
            const localVarPath = `/api/certificates/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Client Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientCertificateControllerGetClientCertList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificates/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TLSCertificatesApi - functional programming interface
 * @export
 */
export const TLSCertificatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TLSCertificatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete Ca Certificate by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caCertificateControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caCertificateControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TLSCertificatesApi.caCertificateControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Ca Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caCertificateControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CaCertificate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caCertificateControllerList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TLSCertificatesApi.caCertificateControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Client Certificate pair by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientCertificateControllerDeleteClientCertificatePair(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientCertificateControllerDeleteClientCertificatePair(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TLSCertificatesApi.clientCertificateControllerDeleteClientCertificatePair']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Client Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientCertificateControllerGetClientCertList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientCertificate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientCertificateControllerGetClientCertList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TLSCertificatesApi.clientCertificateControllerGetClientCertList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TLSCertificatesApi - factory interface
 * @export
 */
export const TLSCertificatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TLSCertificatesApiFp(configuration)
    return {
        /**
         * Delete Ca Certificate by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caCertificateControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.caCertificateControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Ca Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caCertificateControllerList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CaCertificate>> {
            return localVarFp.caCertificateControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Client Certificate pair by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientCertificateControllerDeleteClientCertificatePair(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientCertificateControllerDeleteClientCertificatePair(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Client Certificate list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientCertificateControllerGetClientCertList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ClientCertificate>> {
            return localVarFp.clientCertificateControllerGetClientCertList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TLSCertificatesApi - object-oriented interface
 * @export
 * @class TLSCertificatesApi
 * @extends {BaseAPI}
 */
export class TLSCertificatesApi extends BaseAPI {
    /**
     * Delete Ca Certificate by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TLSCertificatesApi
     */
    public caCertificateControllerDelete(id: string, options?: RawAxiosRequestConfig) {
        return TLSCertificatesApiFp(this.configuration).caCertificateControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Ca Certificate list
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TLSCertificatesApi
     */
    public caCertificateControllerList(options?: RawAxiosRequestConfig) {
        return TLSCertificatesApiFp(this.configuration).caCertificateControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Client Certificate pair by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TLSCertificatesApi
     */
    public clientCertificateControllerDeleteClientCertificatePair(id: string, options?: RawAxiosRequestConfig) {
        return TLSCertificatesApiFp(this.configuration).clientCertificateControllerDeleteClientCertificatePair(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Client Certificate list
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TLSCertificatesApi
     */
    public clientCertificateControllerGetClientCertList(options?: RawAxiosRequestConfig) {
        return TLSCertificatesApiFp(this.configuration).clientCertificateControllerGetClientCertList(options).then((request) => request(this.axios, this.basePath));
    }
}

