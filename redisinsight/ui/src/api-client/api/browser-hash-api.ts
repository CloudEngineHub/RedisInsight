/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddFieldsToHashDto } from '../models';
// @ts-ignore
import type { CreateHashWithExpireDto } from '../models';
// @ts-ignore
import type { DeleteFieldsFromHashDto } from '../models';
// @ts-ignore
import type { DeleteFieldsFromHashResponse } from '../models';
// @ts-ignore
import type { GetHashFieldsDto } from '../models';
// @ts-ignore
import type { GetHashFieldsResponse } from '../models';
// @ts-ignore
import type { UpdateHashFieldsTtlDto } from '../models';
/**
 * BrowserHashApi - axios parameter creator
 * @export
 */
export const BrowserHashApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add the specified fields to the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerAddMemberEncodingEnum} encoding 
         * @param {AddFieldsToHashDto} addFieldsToHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerAddMember: async (dbInstance: string, encoding: HashControllerAddMemberEncodingEnum, addFieldsToHashDto: AddFieldsToHashDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('hashControllerAddMember', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('hashControllerAddMember', 'encoding', encoding)
            // verify required parameter 'addFieldsToHashDto' is not null or undefined
            assertParamExists('hashControllerAddMember', 'addFieldsToHashDto', addFieldsToHashDto)
            const localVarPath = `/api/databases/{dbInstance}/hash`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFieldsToHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set key to hold Hash data type
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerCreateHashEncodingEnum} encoding 
         * @param {CreateHashWithExpireDto} createHashWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerCreateHash: async (dbInstance: string, encoding: HashControllerCreateHashEncodingEnum, createHashWithExpireDto: CreateHashWithExpireDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('hashControllerCreateHash', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('hashControllerCreateHash', 'encoding', encoding)
            // verify required parameter 'createHashWithExpireDto' is not null or undefined
            assertParamExists('hashControllerCreateHash', 'createHashWithExpireDto', createHashWithExpireDto)
            const localVarPath = `/api/databases/{dbInstance}/hash`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHashWithExpireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified fields from the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerDeleteFieldsEncodingEnum} encoding 
         * @param {DeleteFieldsFromHashDto} deleteFieldsFromHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerDeleteFields: async (dbInstance: string, encoding: HashControllerDeleteFieldsEncodingEnum, deleteFieldsFromHashDto: DeleteFieldsFromHashDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('hashControllerDeleteFields', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('hashControllerDeleteFields', 'encoding', encoding)
            // verify required parameter 'deleteFieldsFromHashDto' is not null or undefined
            assertParamExists('hashControllerDeleteFields', 'deleteFieldsFromHashDto', deleteFieldsFromHashDto)
            const localVarPath = `/api/databases/{dbInstance}/hash/fields`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteFieldsFromHashDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get specified fields of the hash stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerGetMembersEncodingEnum} encoding 
         * @param {GetHashFieldsDto} getHashFieldsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerGetMembers: async (dbInstance: string, encoding: HashControllerGetMembersEncodingEnum, getHashFieldsDto: GetHashFieldsDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('hashControllerGetMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('hashControllerGetMembers', 'encoding', encoding)
            // verify required parameter 'getHashFieldsDto' is not null or undefined
            assertParamExists('hashControllerGetMembers', 'getHashFieldsDto', getHashFieldsDto)
            const localVarPath = `/api/databases/{dbInstance}/hash/get-fields`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getHashFieldsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update hash fields ttl
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateHashFieldsTtlDto} updateHashFieldsTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerUpdateTtl: async (dbInstance: string, encoding: HashControllerUpdateTtlEncodingEnum, updateHashFieldsTtlDto: UpdateHashFieldsTtlDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('hashControllerUpdateTtl', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('hashControllerUpdateTtl', 'encoding', encoding)
            // verify required parameter 'updateHashFieldsTtlDto' is not null or undefined
            assertParamExists('hashControllerUpdateTtl', 'updateHashFieldsTtlDto', updateHashFieldsTtlDto)
            const localVarPath = `/api/databases/{dbInstance}/hash/ttl`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHashFieldsTtlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserHashApi - functional programming interface
 * @export
 */
export const BrowserHashApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserHashApiAxiosParamCreator(configuration)
    return {
        /**
         * Add the specified fields to the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerAddMemberEncodingEnum} encoding 
         * @param {AddFieldsToHashDto} addFieldsToHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hashControllerAddMember(dbInstance: string, encoding: HashControllerAddMemberEncodingEnum, addFieldsToHashDto: AddFieldsToHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hashControllerAddMember(dbInstance, encoding, addFieldsToHashDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserHashApi.hashControllerAddMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set key to hold Hash data type
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerCreateHashEncodingEnum} encoding 
         * @param {CreateHashWithExpireDto} createHashWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hashControllerCreateHash(dbInstance: string, encoding: HashControllerCreateHashEncodingEnum, createHashWithExpireDto: CreateHashWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hashControllerCreateHash(dbInstance, encoding, createHashWithExpireDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserHashApi.hashControllerCreateHash']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the specified fields from the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerDeleteFieldsEncodingEnum} encoding 
         * @param {DeleteFieldsFromHashDto} deleteFieldsFromHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hashControllerDeleteFields(dbInstance: string, encoding: HashControllerDeleteFieldsEncodingEnum, deleteFieldsFromHashDto: DeleteFieldsFromHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFieldsFromHashResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hashControllerDeleteFields(dbInstance, encoding, deleteFieldsFromHashDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserHashApi.hashControllerDeleteFields']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get specified fields of the hash stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerGetMembersEncodingEnum} encoding 
         * @param {GetHashFieldsDto} getHashFieldsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hashControllerGetMembers(dbInstance: string, encoding: HashControllerGetMembersEncodingEnum, getHashFieldsDto: GetHashFieldsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHashFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hashControllerGetMembers(dbInstance, encoding, getHashFieldsDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserHashApi.hashControllerGetMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update hash fields ttl
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateHashFieldsTtlDto} updateHashFieldsTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hashControllerUpdateTtl(dbInstance: string, encoding: HashControllerUpdateTtlEncodingEnum, updateHashFieldsTtlDto: UpdateHashFieldsTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hashControllerUpdateTtl(dbInstance, encoding, updateHashFieldsTtlDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserHashApi.hashControllerUpdateTtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserHashApi - factory interface
 * @export
 */
export const BrowserHashApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserHashApiFp(configuration)
    return {
        /**
         * Add the specified fields to the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerAddMemberEncodingEnum} encoding 
         * @param {AddFieldsToHashDto} addFieldsToHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerAddMember(dbInstance: string, encoding: HashControllerAddMemberEncodingEnum, addFieldsToHashDto: AddFieldsToHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.hashControllerAddMember(dbInstance, encoding, addFieldsToHashDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Set key to hold Hash data type
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerCreateHashEncodingEnum} encoding 
         * @param {CreateHashWithExpireDto} createHashWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerCreateHash(dbInstance: string, encoding: HashControllerCreateHashEncodingEnum, createHashWithExpireDto: CreateHashWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.hashControllerCreateHash(dbInstance, encoding, createHashWithExpireDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified fields from the Hash stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerDeleteFieldsEncodingEnum} encoding 
         * @param {DeleteFieldsFromHashDto} deleteFieldsFromHashDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerDeleteFields(dbInstance: string, encoding: HashControllerDeleteFieldsEncodingEnum, deleteFieldsFromHashDto: DeleteFieldsFromHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFieldsFromHashResponse> {
            return localVarFp.hashControllerDeleteFields(dbInstance, encoding, deleteFieldsFromHashDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get specified fields of the hash stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerGetMembersEncodingEnum} encoding 
         * @param {GetHashFieldsDto} getHashFieldsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerGetMembers(dbInstance: string, encoding: HashControllerGetMembersEncodingEnum, getHashFieldsDto: GetHashFieldsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetHashFieldsResponse> {
            return localVarFp.hashControllerGetMembers(dbInstance, encoding, getHashFieldsDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update hash fields ttl
         * @summary 
         * @param {string} dbInstance 
         * @param {HashControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateHashFieldsTtlDto} updateHashFieldsTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hashControllerUpdateTtl(dbInstance: string, encoding: HashControllerUpdateTtlEncodingEnum, updateHashFieldsTtlDto: UpdateHashFieldsTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.hashControllerUpdateTtl(dbInstance, encoding, updateHashFieldsTtlDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserHashApi - object-oriented interface
 * @export
 * @class BrowserHashApi
 * @extends {BaseAPI}
 */
export class BrowserHashApi extends BaseAPI {
    /**
     * Add the specified fields to the Hash stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {HashControllerAddMemberEncodingEnum} encoding 
     * @param {AddFieldsToHashDto} addFieldsToHashDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserHashApi
     */
    public hashControllerAddMember(dbInstance: string, encoding: HashControllerAddMemberEncodingEnum, addFieldsToHashDto: AddFieldsToHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserHashApiFp(this.configuration).hashControllerAddMember(dbInstance, encoding, addFieldsToHashDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set key to hold Hash data type
     * @summary 
     * @param {string} dbInstance 
     * @param {HashControllerCreateHashEncodingEnum} encoding 
     * @param {CreateHashWithExpireDto} createHashWithExpireDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserHashApi
     */
    public hashControllerCreateHash(dbInstance: string, encoding: HashControllerCreateHashEncodingEnum, createHashWithExpireDto: CreateHashWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserHashApiFp(this.configuration).hashControllerCreateHash(dbInstance, encoding, createHashWithExpireDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified fields from the Hash stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {HashControllerDeleteFieldsEncodingEnum} encoding 
     * @param {DeleteFieldsFromHashDto} deleteFieldsFromHashDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserHashApi
     */
    public hashControllerDeleteFields(dbInstance: string, encoding: HashControllerDeleteFieldsEncodingEnum, deleteFieldsFromHashDto: DeleteFieldsFromHashDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserHashApiFp(this.configuration).hashControllerDeleteFields(dbInstance, encoding, deleteFieldsFromHashDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get specified fields of the hash stored at key by cursor position
     * @summary 
     * @param {string} dbInstance 
     * @param {HashControllerGetMembersEncodingEnum} encoding 
     * @param {GetHashFieldsDto} getHashFieldsDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserHashApi
     */
    public hashControllerGetMembers(dbInstance: string, encoding: HashControllerGetMembersEncodingEnum, getHashFieldsDto: GetHashFieldsDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserHashApiFp(this.configuration).hashControllerGetMembers(dbInstance, encoding, getHashFieldsDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update hash fields ttl
     * @summary 
     * @param {string} dbInstance 
     * @param {HashControllerUpdateTtlEncodingEnum} encoding 
     * @param {UpdateHashFieldsTtlDto} updateHashFieldsTtlDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserHashApi
     */
    public hashControllerUpdateTtl(dbInstance: string, encoding: HashControllerUpdateTtlEncodingEnum, updateHashFieldsTtlDto: UpdateHashFieldsTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserHashApiFp(this.configuration).hashControllerUpdateTtl(dbInstance, encoding, updateHashFieldsTtlDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const HashControllerAddMemberEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type HashControllerAddMemberEncodingEnum = typeof HashControllerAddMemberEncodingEnum[keyof typeof HashControllerAddMemberEncodingEnum];
/**
 * @export
 */
export const HashControllerCreateHashEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type HashControllerCreateHashEncodingEnum = typeof HashControllerCreateHashEncodingEnum[keyof typeof HashControllerCreateHashEncodingEnum];
/**
 * @export
 */
export const HashControllerDeleteFieldsEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type HashControllerDeleteFieldsEncodingEnum = typeof HashControllerDeleteFieldsEncodingEnum[keyof typeof HashControllerDeleteFieldsEncodingEnum];
/**
 * @export
 */
export const HashControllerGetMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type HashControllerGetMembersEncodingEnum = typeof HashControllerGetMembersEncodingEnum[keyof typeof HashControllerGetMembersEncodingEnum];
/**
 * @export
 */
export const HashControllerUpdateTtlEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type HashControllerUpdateTtlEncodingEnum = typeof HashControllerUpdateTtlEncodingEnum[keyof typeof HashControllerUpdateTtlEncodingEnum];
