/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RootCustomTutorialManifest } from '../models';
/**
 * TutorialsApi - axios parameter creator
 * @export
 */
export const TutorialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new tutorial
         * @summary 
         * @param {File} [file] ZIP archive with tutorial static files
         * @param {string} [link] External link to zip archive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerCreate: async (file?: File, link?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/custom-tutorials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (link !== undefined) { 
                localVarFormParams.append('link', link as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete custom tutorial and its files
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customTutorialControllerDelete', 'id', id)
            const localVarPath = `/api/custom-tutorials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get global manifest for custom tutorials
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerGetGlobalManifest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/custom-tutorials/manifest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TutorialsApi - functional programming interface
 * @export
 */
export const TutorialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TutorialsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new tutorial
         * @summary 
         * @param {File} [file] ZIP archive with tutorial static files
         * @param {string} [link] External link to zip archive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customTutorialControllerCreate(file?: File, link?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootCustomTutorialManifest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customTutorialControllerCreate(file, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TutorialsApi.customTutorialControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete custom tutorial and its files
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customTutorialControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customTutorialControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TutorialsApi.customTutorialControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get global manifest for custom tutorials
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customTutorialControllerGetGlobalManifest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootCustomTutorialManifest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customTutorialControllerGetGlobalManifest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TutorialsApi.customTutorialControllerGetGlobalManifest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TutorialsApi - factory interface
 * @export
 */
export const TutorialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TutorialsApiFp(configuration)
    return {
        /**
         * Create new tutorial
         * @summary 
         * @param {File} [file] ZIP archive with tutorial static files
         * @param {string} [link] External link to zip archive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerCreate(file?: File, link?: string, options?: RawAxiosRequestConfig): AxiosPromise<RootCustomTutorialManifest> {
            return localVarFp.customTutorialControllerCreate(file, link, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete custom tutorial and its files
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.customTutorialControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get global manifest for custom tutorials
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customTutorialControllerGetGlobalManifest(options?: RawAxiosRequestConfig): AxiosPromise<RootCustomTutorialManifest> {
            return localVarFp.customTutorialControllerGetGlobalManifest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TutorialsApi - object-oriented interface
 * @export
 * @class TutorialsApi
 * @extends {BaseAPI}
 */
export class TutorialsApi extends BaseAPI {
    /**
     * Create new tutorial
     * @summary 
     * @param {File} [file] ZIP archive with tutorial static files
     * @param {string} [link] External link to zip archive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public customTutorialControllerCreate(file?: File, link?: string, options?: RawAxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).customTutorialControllerCreate(file, link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete custom tutorial and its files
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public customTutorialControllerDelete(id: string, options?: RawAxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).customTutorialControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get global manifest for custom tutorials
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorialsApi
     */
    public customTutorialControllerGetGlobalManifest(options?: RawAxiosRequestConfig) {
        return TutorialsApiFp(this.configuration).customTutorialControllerGetGlobalManifest(options).then((request) => request(this.axios, this.basePath));
    }
}

