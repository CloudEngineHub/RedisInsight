/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRejsonRlWithExpireDto } from '../models';
// @ts-ignore
import type { GetRejsonRlDto } from '../models';
// @ts-ignore
import type { GetRejsonRlResponseDto } from '../models';
// @ts-ignore
import type { ModifyRejsonRlArrAppendDto } from '../models';
// @ts-ignore
import type { ModifyRejsonRlSetDto } from '../models';
// @ts-ignore
import type { RemoveRejsonRlDto } from '../models';
// @ts-ignore
import type { RemoveRejsonRlResponse } from '../models';
/**
 * BrowserREJSONRLApi - axios parameter creator
 * @export
 */
export const BrowserREJSONRLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Append item inside REJSON-RL array
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlArrAppendDto} modifyRejsonRlArrAppendDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerArrAppend: async (dbInstance: string, modifyRejsonRlArrAppendDto: ModifyRejsonRlArrAppendDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('rejsonRlControllerArrAppend', 'dbInstance', dbInstance)
            // verify required parameter 'modifyRejsonRlArrAppendDto' is not null or undefined
            assertParamExists('rejsonRlControllerArrAppend', 'modifyRejsonRlArrAppendDto', modifyRejsonRlArrAppendDto)
            const localVarPath = `/api/databases/{dbInstance}/rejson-rl/arrappend`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyRejsonRlArrAppendDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new REJSON-RL data type
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRejsonRlWithExpireDto} createRejsonRlWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerCreateJson: async (dbInstance: string, createRejsonRlWithExpireDto: CreateRejsonRlWithExpireDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('rejsonRlControllerCreateJson', 'dbInstance', dbInstance)
            // verify required parameter 'createRejsonRlWithExpireDto' is not null or undefined
            assertParamExists('rejsonRlControllerCreateJson', 'createRejsonRlWithExpireDto', createRejsonRlWithExpireDto)
            const localVarPath = `/api/databases/{dbInstance}/rejson-rl`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRejsonRlWithExpireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get json properties by path
         * @summary 
         * @param {string} dbInstance 
         * @param {GetRejsonRlDto} getRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerGetJson: async (dbInstance: string, getRejsonRlDto: GetRejsonRlDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('rejsonRlControllerGetJson', 'dbInstance', dbInstance)
            // verify required parameter 'getRejsonRlDto' is not null or undefined
            assertParamExists('rejsonRlControllerGetJson', 'getRejsonRlDto', getRejsonRlDto)
            const localVarPath = `/api/databases/{dbInstance}/rejson-rl/get`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getRejsonRlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify REJSON-RL data type by path
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlSetDto} modifyRejsonRlSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerJsonSet: async (dbInstance: string, modifyRejsonRlSetDto: ModifyRejsonRlSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('rejsonRlControllerJsonSet', 'dbInstance', dbInstance)
            // verify required parameter 'modifyRejsonRlSetDto' is not null or undefined
            assertParamExists('rejsonRlControllerJsonSet', 'modifyRejsonRlSetDto', modifyRejsonRlSetDto)
            const localVarPath = `/api/databases/{dbInstance}/rejson-rl/set`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyRejsonRlSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes path in the REJSON-RL
         * @summary 
         * @param {string} dbInstance 
         * @param {RemoveRejsonRlDto} removeRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerRemove: async (dbInstance: string, removeRejsonRlDto: RemoveRejsonRlDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('rejsonRlControllerRemove', 'dbInstance', dbInstance)
            // verify required parameter 'removeRejsonRlDto' is not null or undefined
            assertParamExists('rejsonRlControllerRemove', 'removeRejsonRlDto', removeRejsonRlDto)
            const localVarPath = `/api/databases/{dbInstance}/rejson-rl`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeRejsonRlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserREJSONRLApi - functional programming interface
 * @export
 */
export const BrowserREJSONRLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserREJSONRLApiAxiosParamCreator(configuration)
    return {
        /**
         * Append item inside REJSON-RL array
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlArrAppendDto} modifyRejsonRlArrAppendDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejsonRlControllerArrAppend(dbInstance: string, modifyRejsonRlArrAppendDto: ModifyRejsonRlArrAppendDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejsonRlControllerArrAppend(dbInstance, modifyRejsonRlArrAppendDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserREJSONRLApi.rejsonRlControllerArrAppend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create new REJSON-RL data type
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRejsonRlWithExpireDto} createRejsonRlWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejsonRlControllerCreateJson(dbInstance: string, createRejsonRlWithExpireDto: CreateRejsonRlWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejsonRlControllerCreateJson(dbInstance, createRejsonRlWithExpireDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserREJSONRLApi.rejsonRlControllerCreateJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get json properties by path
         * @summary 
         * @param {string} dbInstance 
         * @param {GetRejsonRlDto} getRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejsonRlControllerGetJson(dbInstance: string, getRejsonRlDto: GetRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRejsonRlResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejsonRlControllerGetJson(dbInstance, getRejsonRlDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserREJSONRLApi.rejsonRlControllerGetJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify REJSON-RL data type by path
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlSetDto} modifyRejsonRlSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejsonRlControllerJsonSet(dbInstance: string, modifyRejsonRlSetDto: ModifyRejsonRlSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejsonRlControllerJsonSet(dbInstance, modifyRejsonRlSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserREJSONRLApi.rejsonRlControllerJsonSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes path in the REJSON-RL
         * @summary 
         * @param {string} dbInstance 
         * @param {RemoveRejsonRlDto} removeRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejsonRlControllerRemove(dbInstance: string, removeRejsonRlDto: RemoveRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveRejsonRlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejsonRlControllerRemove(dbInstance, removeRejsonRlDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserREJSONRLApi.rejsonRlControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserREJSONRLApi - factory interface
 * @export
 */
export const BrowserREJSONRLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserREJSONRLApiFp(configuration)
    return {
        /**
         * Append item inside REJSON-RL array
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlArrAppendDto} modifyRejsonRlArrAppendDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerArrAppend(dbInstance: string, modifyRejsonRlArrAppendDto: ModifyRejsonRlArrAppendDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejsonRlControllerArrAppend(dbInstance, modifyRejsonRlArrAppendDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new REJSON-RL data type
         * @summary 
         * @param {string} dbInstance 
         * @param {CreateRejsonRlWithExpireDto} createRejsonRlWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerCreateJson(dbInstance: string, createRejsonRlWithExpireDto: CreateRejsonRlWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejsonRlControllerCreateJson(dbInstance, createRejsonRlWithExpireDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get json properties by path
         * @summary 
         * @param {string} dbInstance 
         * @param {GetRejsonRlDto} getRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerGetJson(dbInstance: string, getRejsonRlDto: GetRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetRejsonRlResponseDto> {
            return localVarFp.rejsonRlControllerGetJson(dbInstance, getRejsonRlDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify REJSON-RL data type by path
         * @summary 
         * @param {string} dbInstance 
         * @param {ModifyRejsonRlSetDto} modifyRejsonRlSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerJsonSet(dbInstance: string, modifyRejsonRlSetDto: ModifyRejsonRlSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejsonRlControllerJsonSet(dbInstance, modifyRejsonRlSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes path in the REJSON-RL
         * @summary 
         * @param {string} dbInstance 
         * @param {RemoveRejsonRlDto} removeRejsonRlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejsonRlControllerRemove(dbInstance: string, removeRejsonRlDto: RemoveRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<RemoveRejsonRlResponse> {
            return localVarFp.rejsonRlControllerRemove(dbInstance, removeRejsonRlDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserREJSONRLApi - object-oriented interface
 * @export
 * @class BrowserREJSONRLApi
 * @extends {BaseAPI}
 */
export class BrowserREJSONRLApi extends BaseAPI {
    /**
     * Append item inside REJSON-RL array
     * @summary 
     * @param {string} dbInstance 
     * @param {ModifyRejsonRlArrAppendDto} modifyRejsonRlArrAppendDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserREJSONRLApi
     */
    public rejsonRlControllerArrAppend(dbInstance: string, modifyRejsonRlArrAppendDto: ModifyRejsonRlArrAppendDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserREJSONRLApiFp(this.configuration).rejsonRlControllerArrAppend(dbInstance, modifyRejsonRlArrAppendDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new REJSON-RL data type
     * @summary 
     * @param {string} dbInstance 
     * @param {CreateRejsonRlWithExpireDto} createRejsonRlWithExpireDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserREJSONRLApi
     */
    public rejsonRlControllerCreateJson(dbInstance: string, createRejsonRlWithExpireDto: CreateRejsonRlWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserREJSONRLApiFp(this.configuration).rejsonRlControllerCreateJson(dbInstance, createRejsonRlWithExpireDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get json properties by path
     * @summary 
     * @param {string} dbInstance 
     * @param {GetRejsonRlDto} getRejsonRlDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserREJSONRLApi
     */
    public rejsonRlControllerGetJson(dbInstance: string, getRejsonRlDto: GetRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserREJSONRLApiFp(this.configuration).rejsonRlControllerGetJson(dbInstance, getRejsonRlDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify REJSON-RL data type by path
     * @summary 
     * @param {string} dbInstance 
     * @param {ModifyRejsonRlSetDto} modifyRejsonRlSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserREJSONRLApi
     */
    public rejsonRlControllerJsonSet(dbInstance: string, modifyRejsonRlSetDto: ModifyRejsonRlSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserREJSONRLApiFp(this.configuration).rejsonRlControllerJsonSet(dbInstance, modifyRejsonRlSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes path in the REJSON-RL
     * @summary 
     * @param {string} dbInstance 
     * @param {RemoveRejsonRlDto} removeRejsonRlDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserREJSONRLApi
     */
    public rejsonRlControllerRemove(dbInstance: string, removeRejsonRlDto: RemoveRejsonRlDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserREJSONRLApiFp(this.configuration).rejsonRlControllerRemove(dbInstance, removeRejsonRlDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

