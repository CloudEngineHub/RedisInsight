/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddMembersToSetDto } from '../models';
// @ts-ignore
import type { CreateSetWithExpireDto } from '../models';
// @ts-ignore
import type { DeleteMembersFromSetDto } from '../models';
// @ts-ignore
import type { DeleteMembersFromSetResponse } from '../models';
// @ts-ignore
import type { GetSetMembersDto } from '../models';
// @ts-ignore
import type { GetSetMembersResponse } from '../models';
/**
 * BrowserSetApi - axios parameter creator
 * @export
 */
export const BrowserSetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add the specified members to the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToSetDto} addMembersToSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerAddMembers: async (dbInstance: string, encoding: SetControllerAddMembersEncodingEnum, addMembersToSetDto: AddMembersToSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('setControllerAddMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('setControllerAddMembers', 'encoding', encoding)
            // verify required parameter 'addMembersToSetDto' is not null or undefined
            assertParamExists('setControllerAddMembers', 'addMembersToSetDto', addMembersToSetDto)
            const localVarPath = `/api/databases/{dbInstance}/set`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMembersToSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set key to hold Set data type
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateSetWithExpireDto} createSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerCreateSet: async (dbInstance: string, encoding: SetControllerCreateSetEncodingEnum, createSetWithExpireDto: CreateSetWithExpireDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('setControllerCreateSet', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('setControllerCreateSet', 'encoding', encoding)
            // verify required parameter 'createSetWithExpireDto' is not null or undefined
            assertParamExists('setControllerCreateSet', 'createSetWithExpireDto', createSetWithExpireDto)
            const localVarPath = `/api/databases/{dbInstance}/set`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSetWithExpireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromSetDto} deleteMembersFromSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerDeleteMembers: async (dbInstance: string, encoding: SetControllerDeleteMembersEncodingEnum, deleteMembersFromSetDto: DeleteMembersFromSetDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('setControllerDeleteMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('setControllerDeleteMembers', 'encoding', encoding)
            // verify required parameter 'deleteMembersFromSetDto' is not null or undefined
            assertParamExists('setControllerDeleteMembers', 'deleteMembersFromSetDto', deleteMembersFromSetDto)
            const localVarPath = `/api/databases/{dbInstance}/set/members`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMembersFromSetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get specified members of the set stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerGetMembersEncodingEnum} encoding 
         * @param {GetSetMembersDto} getSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerGetMembers: async (dbInstance: string, encoding: SetControllerGetMembersEncodingEnum, getSetMembersDto: GetSetMembersDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('setControllerGetMembers', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('setControllerGetMembers', 'encoding', encoding)
            // verify required parameter 'getSetMembersDto' is not null or undefined
            assertParamExists('setControllerGetMembers', 'getSetMembersDto', getSetMembersDto)
            const localVarPath = `/api/databases/{dbInstance}/set/get-members`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSetMembersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserSetApi - functional programming interface
 * @export
 */
export const BrowserSetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserSetApiAxiosParamCreator(configuration)
    return {
        /**
         * Add the specified members to the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToSetDto} addMembersToSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setControllerAddMembers(dbInstance: string, encoding: SetControllerAddMembersEncodingEnum, addMembersToSetDto: AddMembersToSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setControllerAddMembers(dbInstance, encoding, addMembersToSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserSetApi.setControllerAddMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set key to hold Set data type
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateSetWithExpireDto} createSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setControllerCreateSet(dbInstance: string, encoding: SetControllerCreateSetEncodingEnum, createSetWithExpireDto: CreateSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setControllerCreateSet(dbInstance, encoding, createSetWithExpireDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserSetApi.setControllerCreateSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromSetDto} deleteMembersFromSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setControllerDeleteMembers(dbInstance: string, encoding: SetControllerDeleteMembersEncodingEnum, deleteMembersFromSetDto: DeleteMembersFromSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMembersFromSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setControllerDeleteMembers(dbInstance, encoding, deleteMembersFromSetDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserSetApi.setControllerDeleteMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get specified members of the set stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerGetMembersEncodingEnum} encoding 
         * @param {GetSetMembersDto} getSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setControllerGetMembers(dbInstance: string, encoding: SetControllerGetMembersEncodingEnum, getSetMembersDto: GetSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSetMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setControllerGetMembers(dbInstance, encoding, getSetMembersDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserSetApi.setControllerGetMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserSetApi - factory interface
 * @export
 */
export const BrowserSetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserSetApiFp(configuration)
    return {
        /**
         * Add the specified members to the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerAddMembersEncodingEnum} encoding 
         * @param {AddMembersToSetDto} addMembersToSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerAddMembers(dbInstance: string, encoding: SetControllerAddMembersEncodingEnum, addMembersToSetDto: AddMembersToSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setControllerAddMembers(dbInstance, encoding, addMembersToSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Set key to hold Set data type
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerCreateSetEncodingEnum} encoding 
         * @param {CreateSetWithExpireDto} createSetWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerCreateSet(dbInstance: string, encoding: SetControllerCreateSetEncodingEnum, createSetWithExpireDto: CreateSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setControllerCreateSet(dbInstance, encoding, createSetWithExpireDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified members from the Set stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerDeleteMembersEncodingEnum} encoding 
         * @param {DeleteMembersFromSetDto} deleteMembersFromSetDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerDeleteMembers(dbInstance: string, encoding: SetControllerDeleteMembersEncodingEnum, deleteMembersFromSetDto: DeleteMembersFromSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteMembersFromSetResponse> {
            return localVarFp.setControllerDeleteMembers(dbInstance, encoding, deleteMembersFromSetDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get specified members of the set stored at key by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {SetControllerGetMembersEncodingEnum} encoding 
         * @param {GetSetMembersDto} getSetMembersDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerGetMembers(dbInstance: string, encoding: SetControllerGetMembersEncodingEnum, getSetMembersDto: GetSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetSetMembersResponse> {
            return localVarFp.setControllerGetMembers(dbInstance, encoding, getSetMembersDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserSetApi - object-oriented interface
 * @export
 * @class BrowserSetApi
 * @extends {BaseAPI}
 */
export class BrowserSetApi extends BaseAPI {
    /**
     * Add the specified members to the Set stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {SetControllerAddMembersEncodingEnum} encoding 
     * @param {AddMembersToSetDto} addMembersToSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserSetApi
     */
    public setControllerAddMembers(dbInstance: string, encoding: SetControllerAddMembersEncodingEnum, addMembersToSetDto: AddMembersToSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserSetApiFp(this.configuration).setControllerAddMembers(dbInstance, encoding, addMembersToSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set key to hold Set data type
     * @summary 
     * @param {string} dbInstance 
     * @param {SetControllerCreateSetEncodingEnum} encoding 
     * @param {CreateSetWithExpireDto} createSetWithExpireDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserSetApi
     */
    public setControllerCreateSet(dbInstance: string, encoding: SetControllerCreateSetEncodingEnum, createSetWithExpireDto: CreateSetWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserSetApiFp(this.configuration).setControllerCreateSet(dbInstance, encoding, createSetWithExpireDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified members from the Set stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {SetControllerDeleteMembersEncodingEnum} encoding 
     * @param {DeleteMembersFromSetDto} deleteMembersFromSetDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserSetApi
     */
    public setControllerDeleteMembers(dbInstance: string, encoding: SetControllerDeleteMembersEncodingEnum, deleteMembersFromSetDto: DeleteMembersFromSetDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserSetApiFp(this.configuration).setControllerDeleteMembers(dbInstance, encoding, deleteMembersFromSetDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get specified members of the set stored at key by cursor position
     * @summary 
     * @param {string} dbInstance 
     * @param {SetControllerGetMembersEncodingEnum} encoding 
     * @param {GetSetMembersDto} getSetMembersDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserSetApi
     */
    public setControllerGetMembers(dbInstance: string, encoding: SetControllerGetMembersEncodingEnum, getSetMembersDto: GetSetMembersDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserSetApiFp(this.configuration).setControllerGetMembers(dbInstance, encoding, getSetMembersDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SetControllerAddMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type SetControllerAddMembersEncodingEnum = typeof SetControllerAddMembersEncodingEnum[keyof typeof SetControllerAddMembersEncodingEnum];
/**
 * @export
 */
export const SetControllerCreateSetEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type SetControllerCreateSetEncodingEnum = typeof SetControllerCreateSetEncodingEnum[keyof typeof SetControllerCreateSetEncodingEnum];
/**
 * @export
 */
export const SetControllerDeleteMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type SetControllerDeleteMembersEncodingEnum = typeof SetControllerDeleteMembersEncodingEnum[keyof typeof SetControllerDeleteMembersEncodingEnum];
/**
 * @export
 */
export const SetControllerGetMembersEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type SetControllerGetMembersEncodingEnum = typeof SetControllerGetMembersEncodingEnum[keyof typeof SetControllerGetMembersEncodingEnum];
