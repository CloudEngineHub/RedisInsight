/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteKeysDto } from '../models';
// @ts-ignore
import type { DeleteKeysResponse } from '../models';
// @ts-ignore
import type { GetKeyInfoDto } from '../models';
// @ts-ignore
import type { GetKeyInfoResponse } from '../models';
// @ts-ignore
import type { GetKeysDto } from '../models';
// @ts-ignore
import type { GetKeysInfoDto } from '../models';
// @ts-ignore
import type { GetKeysWithDetailsResponse } from '../models';
// @ts-ignore
import type { KeyTtlResponse } from '../models';
// @ts-ignore
import type { RenameKeyDto } from '../models';
// @ts-ignore
import type { RenameKeyResponse } from '../models';
// @ts-ignore
import type { UpdateKeyTtlDto } from '../models';
/**
 * BrowserKeysApi - axios parameter creator
 * @export
 */
export const BrowserKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerDeleteKeyEncodingEnum} encoding 
         * @param {DeleteKeysDto} deleteKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerDeleteKey: async (dbInstance: string, encoding: KeysControllerDeleteKeyEncodingEnum, deleteKeysDto: DeleteKeysDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerDeleteKey', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerDeleteKey', 'encoding', encoding)
            // verify required parameter 'deleteKeysDto' is not null or undefined
            assertParamExists('keysControllerDeleteKey', 'deleteKeysDto', deleteKeysDto)
            const localVarPath = `/api/databases/{dbInstance}/keys`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteKeysDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get key info
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeyInfoEncodingEnum} encoding 
         * @param {GetKeyInfoDto} getKeyInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeyInfo: async (dbInstance: string, encoding: KeysControllerGetKeyInfoEncodingEnum, getKeyInfoDto: GetKeyInfoDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerGetKeyInfo', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerGetKeyInfo', 'encoding', encoding)
            // verify required parameter 'getKeyInfoDto' is not null or undefined
            assertParamExists('keysControllerGetKeyInfo', 'getKeyInfoDto', getKeyInfoDto)
            const localVarPath = `/api/databases/{dbInstance}/keys/get-info`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getKeyInfoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get keys by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysEncodingEnum} encoding 
         * @param {GetKeysDto} getKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeys: async (dbInstance: string, encoding: KeysControllerGetKeysEncodingEnum, getKeysDto: GetKeysDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerGetKeys', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerGetKeys', 'encoding', encoding)
            // verify required parameter 'getKeysDto' is not null or undefined
            assertParamExists('keysControllerGetKeys', 'getKeysDto', getKeysDto)
            const localVarPath = `/api/databases/{dbInstance}/keys`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getKeysDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get info for multiple keys
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysInfoEncodingEnum} encoding 
         * @param {GetKeysInfoDto} getKeysInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeysInfo: async (dbInstance: string, encoding: KeysControllerGetKeysInfoEncodingEnum, getKeysInfoDto: GetKeysInfoDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerGetKeysInfo', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerGetKeysInfo', 'encoding', encoding)
            // verify required parameter 'getKeysInfoDto' is not null or undefined
            assertParamExists('keysControllerGetKeysInfo', 'getKeysInfoDto', getKeysInfoDto)
            const localVarPath = `/api/databases/{dbInstance}/keys/get-metadata`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getKeysInfoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerRenameKeyEncodingEnum} encoding 
         * @param {RenameKeyDto} renameKeyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerRenameKey: async (dbInstance: string, encoding: KeysControllerRenameKeyEncodingEnum, renameKeyDto: RenameKeyDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerRenameKey', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerRenameKey', 'encoding', encoding)
            // verify required parameter 'renameKeyDto' is not null or undefined
            assertParamExists('keysControllerRenameKey', 'renameKeyDto', renameKeyDto)
            const localVarPath = `/api/databases/{dbInstance}/keys/name`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameKeyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the remaining time to live of a key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateKeyTtlDto} updateKeyTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerUpdateTtl: async (dbInstance: string, encoding: KeysControllerUpdateTtlEncodingEnum, updateKeyTtlDto: UpdateKeyTtlDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('keysControllerUpdateTtl', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('keysControllerUpdateTtl', 'encoding', encoding)
            // verify required parameter 'updateKeyTtlDto' is not null or undefined
            assertParamExists('keysControllerUpdateTtl', 'updateKeyTtlDto', updateKeyTtlDto)
            const localVarPath = `/api/databases/{dbInstance}/keys/ttl`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateKeyTtlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserKeysApi - functional programming interface
 * @export
 */
export const BrowserKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerDeleteKeyEncodingEnum} encoding 
         * @param {DeleteKeysDto} deleteKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerDeleteKey(dbInstance: string, encoding: KeysControllerDeleteKeyEncodingEnum, deleteKeysDto: DeleteKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteKeysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerDeleteKey(dbInstance, encoding, deleteKeysDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerDeleteKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get key info
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeyInfoEncodingEnum} encoding 
         * @param {GetKeyInfoDto} getKeyInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerGetKeyInfo(dbInstance: string, encoding: KeysControllerGetKeyInfoEncodingEnum, getKeyInfoDto: GetKeyInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeyInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerGetKeyInfo(dbInstance, encoding, getKeyInfoDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerGetKeyInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get keys by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysEncodingEnum} encoding 
         * @param {GetKeysDto} getKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerGetKeys(dbInstance: string, encoding: KeysControllerGetKeysEncodingEnum, getKeysDto: GetKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetKeysWithDetailsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerGetKeys(dbInstance, encoding, getKeysDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerGetKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get info for multiple keys
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysInfoEncodingEnum} encoding 
         * @param {GetKeysInfoDto} getKeysInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerGetKeysInfo(dbInstance: string, encoding: KeysControllerGetKeysInfoEncodingEnum, getKeysInfoDto: GetKeysInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetKeyInfoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerGetKeysInfo(dbInstance, encoding, getKeysInfoDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerGetKeysInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rename key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerRenameKeyEncodingEnum} encoding 
         * @param {RenameKeyDto} renameKeyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerRenameKey(dbInstance: string, encoding: KeysControllerRenameKeyEncodingEnum, renameKeyDto: RenameKeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenameKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerRenameKey(dbInstance, encoding, renameKeyDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerRenameKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the remaining time to live of a key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateKeyTtlDto} updateKeyTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keysControllerUpdateTtl(dbInstance: string, encoding: KeysControllerUpdateTtlEncodingEnum, updateKeyTtlDto: UpdateKeyTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyTtlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keysControllerUpdateTtl(dbInstance, encoding, updateKeyTtlDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserKeysApi.keysControllerUpdateTtl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserKeysApi - factory interface
 * @export
 */
export const BrowserKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserKeysApiFp(configuration)
    return {
        /**
         * Delete key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerDeleteKeyEncodingEnum} encoding 
         * @param {DeleteKeysDto} deleteKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerDeleteKey(dbInstance: string, encoding: KeysControllerDeleteKeyEncodingEnum, deleteKeysDto: DeleteKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteKeysResponse> {
            return localVarFp.keysControllerDeleteKey(dbInstance, encoding, deleteKeysDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get key info
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeyInfoEncodingEnum} encoding 
         * @param {GetKeyInfoDto} getKeyInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeyInfo(dbInstance: string, encoding: KeysControllerGetKeyInfoEncodingEnum, getKeyInfoDto: GetKeyInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetKeyInfoResponse> {
            return localVarFp.keysControllerGetKeyInfo(dbInstance, encoding, getKeyInfoDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get keys by cursor position
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysEncodingEnum} encoding 
         * @param {GetKeysDto} getKeysDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeys(dbInstance: string, encoding: KeysControllerGetKeysEncodingEnum, getKeysDto: GetKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetKeysWithDetailsResponse>> {
            return localVarFp.keysControllerGetKeys(dbInstance, encoding, getKeysDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get info for multiple keys
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerGetKeysInfoEncodingEnum} encoding 
         * @param {GetKeysInfoDto} getKeysInfoDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerGetKeysInfo(dbInstance: string, encoding: KeysControllerGetKeysInfoEncodingEnum, getKeysInfoDto: GetKeysInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetKeyInfoResponse>> {
            return localVarFp.keysControllerGetKeysInfo(dbInstance, encoding, getKeysInfoDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerRenameKeyEncodingEnum} encoding 
         * @param {RenameKeyDto} renameKeyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerRenameKey(dbInstance: string, encoding: KeysControllerRenameKeyEncodingEnum, renameKeyDto: RenameKeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<RenameKeyResponse> {
            return localVarFp.keysControllerRenameKey(dbInstance, encoding, renameKeyDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the remaining time to live of a key
         * @summary 
         * @param {string} dbInstance 
         * @param {KeysControllerUpdateTtlEncodingEnum} encoding 
         * @param {UpdateKeyTtlDto} updateKeyTtlDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keysControllerUpdateTtl(dbInstance: string, encoding: KeysControllerUpdateTtlEncodingEnum, updateKeyTtlDto: UpdateKeyTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<KeyTtlResponse> {
            return localVarFp.keysControllerUpdateTtl(dbInstance, encoding, updateKeyTtlDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserKeysApi - object-oriented interface
 * @export
 * @class BrowserKeysApi
 * @extends {BaseAPI}
 */
export class BrowserKeysApi extends BaseAPI {
    /**
     * Delete key
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerDeleteKeyEncodingEnum} encoding 
     * @param {DeleteKeysDto} deleteKeysDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerDeleteKey(dbInstance: string, encoding: KeysControllerDeleteKeyEncodingEnum, deleteKeysDto: DeleteKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerDeleteKey(dbInstance, encoding, deleteKeysDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get key info
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerGetKeyInfoEncodingEnum} encoding 
     * @param {GetKeyInfoDto} getKeyInfoDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerGetKeyInfo(dbInstance: string, encoding: KeysControllerGetKeyInfoEncodingEnum, getKeyInfoDto: GetKeyInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerGetKeyInfo(dbInstance, encoding, getKeyInfoDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get keys by cursor position
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerGetKeysEncodingEnum} encoding 
     * @param {GetKeysDto} getKeysDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerGetKeys(dbInstance: string, encoding: KeysControllerGetKeysEncodingEnum, getKeysDto: GetKeysDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerGetKeys(dbInstance, encoding, getKeysDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get info for multiple keys
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerGetKeysInfoEncodingEnum} encoding 
     * @param {GetKeysInfoDto} getKeysInfoDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerGetKeysInfo(dbInstance: string, encoding: KeysControllerGetKeysInfoEncodingEnum, getKeysInfoDto: GetKeysInfoDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerGetKeysInfo(dbInstance, encoding, getKeysInfoDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rename key
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerRenameKeyEncodingEnum} encoding 
     * @param {RenameKeyDto} renameKeyDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerRenameKey(dbInstance: string, encoding: KeysControllerRenameKeyEncodingEnum, renameKeyDto: RenameKeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerRenameKey(dbInstance, encoding, renameKeyDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the remaining time to live of a key
     * @summary 
     * @param {string} dbInstance 
     * @param {KeysControllerUpdateTtlEncodingEnum} encoding 
     * @param {UpdateKeyTtlDto} updateKeyTtlDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserKeysApi
     */
    public keysControllerUpdateTtl(dbInstance: string, encoding: KeysControllerUpdateTtlEncodingEnum, updateKeyTtlDto: UpdateKeyTtlDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserKeysApiFp(this.configuration).keysControllerUpdateTtl(dbInstance, encoding, updateKeyTtlDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const KeysControllerDeleteKeyEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerDeleteKeyEncodingEnum = typeof KeysControllerDeleteKeyEncodingEnum[keyof typeof KeysControllerDeleteKeyEncodingEnum];
/**
 * @export
 */
export const KeysControllerGetKeyInfoEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerGetKeyInfoEncodingEnum = typeof KeysControllerGetKeyInfoEncodingEnum[keyof typeof KeysControllerGetKeyInfoEncodingEnum];
/**
 * @export
 */
export const KeysControllerGetKeysEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerGetKeysEncodingEnum = typeof KeysControllerGetKeysEncodingEnum[keyof typeof KeysControllerGetKeysEncodingEnum];
/**
 * @export
 */
export const KeysControllerGetKeysInfoEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerGetKeysInfoEncodingEnum = typeof KeysControllerGetKeysInfoEncodingEnum[keyof typeof KeysControllerGetKeysInfoEncodingEnum];
/**
 * @export
 */
export const KeysControllerRenameKeyEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerRenameKeyEncodingEnum = typeof KeysControllerRenameKeyEncodingEnum[keyof typeof KeysControllerRenameKeyEncodingEnum];
/**
 * @export
 */
export const KeysControllerUpdateTtlEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type KeysControllerUpdateTtlEncodingEnum = typeof KeysControllerUpdateTtlEncodingEnum[keyof typeof KeysControllerUpdateTtlEncodingEnum];
