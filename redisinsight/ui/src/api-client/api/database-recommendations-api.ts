/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DatabaseRecommendation } from '../models';
// @ts-ignore
import type { DatabaseRecommendationsResponse } from '../models';
// @ts-ignore
import type { DeleteDatabaseRecommendationDto } from '../models';
// @ts-ignore
import type { ModifyDatabaseRecommendationDto } from '../models';
/**
 * DatabaseRecommendationsApi - axios parameter creator
 * @export
 */
export const DatabaseRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete many recommendations by ids
         * @summary 
         * @param {string} dbInstance 
         * @param {DeleteDatabaseRecommendationDto} deleteDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerBulkDeleteDatabaseRecommendation: async (dbInstance: string, deleteDatabaseRecommendationDto: DeleteDatabaseRecommendationDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseRecommendationControllerBulkDeleteDatabaseRecommendation', 'dbInstance', dbInstance)
            // verify required parameter 'deleteDatabaseRecommendationDto' is not null or undefined
            assertParamExists('databaseRecommendationControllerBulkDeleteDatabaseRecommendation', 'deleteDatabaseRecommendationDto', deleteDatabaseRecommendationDto)
            const localVarPath = `/api/databases/{dbInstance}/recommendations`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDatabaseRecommendationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database recommendations
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerList: async (dbInstance: string, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseRecommendationControllerList', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/recommendations`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update database recommendation by id
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance 
         * @param {ModifyDatabaseRecommendationDto} modifyDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerModify: async (id: string, dbInstance: string, modifyDatabaseRecommendationDto: ModifyDatabaseRecommendationDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseRecommendationControllerModify', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseRecommendationControllerModify', 'dbInstance', dbInstance)
            // verify required parameter 'modifyDatabaseRecommendationDto' is not null or undefined
            assertParamExists('databaseRecommendationControllerModify', 'modifyDatabaseRecommendationDto', modifyDatabaseRecommendationDto)
            const localVarPath = `/api/databases/{dbInstance}/recommendations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDatabaseRecommendationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark all database recommendations as read
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerRead: async (dbInstance: string, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseRecommendationControllerRead', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/recommendations/read`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseRecommendationsApi - functional programming interface
 * @export
 */
export const DatabaseRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete many recommendations by ids
         * @summary 
         * @param {string} dbInstance 
         * @param {DeleteDatabaseRecommendationDto} deleteDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance: string, deleteDatabaseRecommendationDto: DeleteDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDatabaseRecommendationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance, deleteDatabaseRecommendationDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseRecommendationsApi.databaseRecommendationControllerBulkDeleteDatabaseRecommendation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get database recommendations
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseRecommendationControllerList(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseRecommendationControllerList(dbInstance, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseRecommendationsApi.databaseRecommendationControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update database recommendation by id
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance 
         * @param {ModifyDatabaseRecommendationDto} modifyDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseRecommendationControllerModify(id: string, dbInstance: string, modifyDatabaseRecommendationDto: ModifyDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseRecommendation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseRecommendationControllerModify(id, dbInstance, modifyDatabaseRecommendationDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseRecommendationsApi.databaseRecommendationControllerModify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark all database recommendations as read
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseRecommendationControllerRead(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseRecommendationControllerRead(dbInstance, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseRecommendationsApi.databaseRecommendationControllerRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DatabaseRecommendationsApi - factory interface
 * @export
 */
export const DatabaseRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseRecommendationsApiFp(configuration)
    return {
        /**
         * Delete many recommendations by ids
         * @summary 
         * @param {string} dbInstance 
         * @param {DeleteDatabaseRecommendationDto} deleteDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance: string, deleteDatabaseRecommendationDto: DeleteDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDatabaseRecommendationDto> {
            return localVarFp.databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance, deleteDatabaseRecommendationDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database recommendations
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerList(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseRecommendationsResponse> {
            return localVarFp.databaseRecommendationControllerList(dbInstance, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update database recommendation by id
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance 
         * @param {ModifyDatabaseRecommendationDto} modifyDatabaseRecommendationDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerModify(id: string, dbInstance: string, modifyDatabaseRecommendationDto: ModifyDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseRecommendation> {
            return localVarFp.databaseRecommendationControllerModify(id, dbInstance, modifyDatabaseRecommendationDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark all database recommendations as read
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseRecommendationControllerRead(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseRecommendationControllerRead(dbInstance, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseRecommendationsApi - object-oriented interface
 * @export
 * @class DatabaseRecommendationsApi
 * @extends {BaseAPI}
 */
export class DatabaseRecommendationsApi extends BaseAPI {
    /**
     * Delete many recommendations by ids
     * @summary 
     * @param {string} dbInstance 
     * @param {DeleteDatabaseRecommendationDto} deleteDatabaseRecommendationDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseRecommendationsApi
     */
    public databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance: string, deleteDatabaseRecommendationDto: DeleteDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseRecommendationsApiFp(this.configuration).databaseRecommendationControllerBulkDeleteDatabaseRecommendation(dbInstance, deleteDatabaseRecommendationDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get database recommendations
     * @summary 
     * @param {string} dbInstance 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseRecommendationsApi
     */
    public databaseRecommendationControllerList(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseRecommendationsApiFp(this.configuration).databaseRecommendationControllerList(dbInstance, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update database recommendation by id
     * @summary 
     * @param {string} id 
     * @param {string} dbInstance 
     * @param {ModifyDatabaseRecommendationDto} modifyDatabaseRecommendationDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseRecommendationsApi
     */
    public databaseRecommendationControllerModify(id: string, dbInstance: string, modifyDatabaseRecommendationDto: ModifyDatabaseRecommendationDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseRecommendationsApiFp(this.configuration).databaseRecommendationControllerModify(id, dbInstance, modifyDatabaseRecommendationDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark all database recommendations as read
     * @summary 
     * @param {string} dbInstance 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseRecommendationsApi
     */
    public databaseRecommendationControllerRead(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseRecommendationsApiFp(this.configuration).databaseRecommendationControllerRead(dbInstance, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

