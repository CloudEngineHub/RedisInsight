/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateCliClientResponse } from '../models';
// @ts-ignore
import type { DeleteClientResponse } from '../models';
// @ts-ignore
import type { SendCommandDto } from '../models';
// @ts-ignore
import type { SendCommandResponse } from '../models';
/**
 * CLIApi - axios parameter creator
 * @export
 */
export const CLIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete Redis CLI client
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerDeleteClient: async (dbInstance: string, uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('cliControllerDeleteClient', 'dbInstance', dbInstance)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('cliControllerDeleteClient', 'uuid', uuid)
            const localVarPath = `/api/databases/{dbInstance}/cli/{uuid}`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerGetClient: async (dbInstance: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('cliControllerGetClient', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/cli`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Re-create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerReCreateClient: async (dbInstance: string, uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('cliControllerReCreateClient', 'dbInstance', dbInstance)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('cliControllerReCreateClient', 'uuid', uuid)
            const localVarPath = `/api/databases/{dbInstance}/cli/{uuid}`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerSendClusterCommand: async (dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('cliControllerSendClusterCommand', 'dbInstance', dbInstance)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('cliControllerSendClusterCommand', 'uuid', uuid)
            // verify required parameter 'sendCommandDto' is not null or undefined
            assertParamExists('cliControllerSendClusterCommand', 'sendCommandDto', sendCommandDto)
            const localVarPath = `/api/databases/{dbInstance}/cli/{uuid}/send-cluster-command`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerSendCommand: async (dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('cliControllerSendCommand', 'dbInstance', dbInstance)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('cliControllerSendCommand', 'uuid', uuid)
            // verify required parameter 'sendCommandDto' is not null or undefined
            assertParamExists('cliControllerSendCommand', 'sendCommandDto', sendCommandDto)
            const localVarPath = `/api/databases/{dbInstance}/cli/{uuid}/send-command`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CLIApi - functional programming interface
 * @export
 */
export const CLIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CLIApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete Redis CLI client
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cliControllerDeleteClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cliControllerDeleteClient(dbInstance, uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CLIApi.cliControllerDeleteClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cliControllerGetClient(dbInstance: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCliClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cliControllerGetClient(dbInstance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CLIApi.cliControllerGetClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Re-create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cliControllerReCreateClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cliControllerReCreateClient(dbInstance, uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CLIApi.cliControllerReCreateClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cliControllerSendClusterCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SendCommandResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cliControllerSendClusterCommand(dbInstance, uuid, sendCommandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CLIApi.cliControllerSendClusterCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cliControllerSendCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendCommandResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cliControllerSendCommand(dbInstance, uuid, sendCommandDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CLIApi.cliControllerSendCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CLIApi - factory interface
 * @export
 */
export const CLIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CLIApiFp(configuration)
    return {
        /**
         * Delete Redis CLI client
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerDeleteClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteClientResponse> {
            return localVarFp.cliControllerDeleteClient(dbInstance, uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerGetClient(dbInstance: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateCliClientResponse> {
            return localVarFp.cliControllerGetClient(dbInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * Re-create Redis client for CLI
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerReCreateClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cliControllerReCreateClient(dbInstance, uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerSendClusterCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<SendCommandResponse>> {
            return localVarFp.cliControllerSendClusterCommand(dbInstance, uuid, sendCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Send Redis CLI command
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {string} uuid CLI client uuid
         * @param {SendCommandDto} sendCommandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cliControllerSendCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig): AxiosPromise<SendCommandResponse> {
            return localVarFp.cliControllerSendCommand(dbInstance, uuid, sendCommandDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CLIApi - object-oriented interface
 * @export
 * @class CLIApi
 * @extends {BaseAPI}
 */
export class CLIApi extends BaseAPI {
    /**
     * Delete Redis CLI client
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} uuid CLI client uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CLIApi
     */
    public cliControllerDeleteClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig) {
        return CLIApiFp(this.configuration).cliControllerDeleteClient(dbInstance, uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Redis client for CLI
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CLIApi
     */
    public cliControllerGetClient(dbInstance: string, options?: RawAxiosRequestConfig) {
        return CLIApiFp(this.configuration).cliControllerGetClient(dbInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Re-create Redis client for CLI
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} uuid CLI client uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CLIApi
     */
    public cliControllerReCreateClient(dbInstance: string, uuid: string, options?: RawAxiosRequestConfig) {
        return CLIApiFp(this.configuration).cliControllerReCreateClient(dbInstance, uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send Redis CLI command
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} uuid CLI client uuid
     * @param {SendCommandDto} sendCommandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CLIApi
     */
    public cliControllerSendClusterCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig) {
        return CLIApiFp(this.configuration).cliControllerSendClusterCommand(dbInstance, uuid, sendCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send Redis CLI command
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {string} uuid CLI client uuid
     * @param {SendCommandDto} sendCommandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CLIApi
     */
    public cliControllerSendCommand(dbInstance: string, uuid: string, sendCommandDto: SendCommandDto, options?: RawAxiosRequestConfig) {
        return CLIApiFp(this.configuration).cliControllerSendCommand(dbInstance, uuid, sendCommandDto, options).then((request) => request(this.axios, this.basePath));
    }
}

