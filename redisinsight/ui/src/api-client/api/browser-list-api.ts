/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateListWithExpireDto } from '../models';
// @ts-ignore
import type { DeleteListElementsDto } from '../models';
// @ts-ignore
import type { DeleteListElementsResponse } from '../models';
// @ts-ignore
import type { GetListElementResponse } from '../models';
// @ts-ignore
import type { GetListElementsDto } from '../models';
// @ts-ignore
import type { GetListElementsResponse } from '../models';
// @ts-ignore
import type { KeyDto } from '../models';
// @ts-ignore
import type { PushElementToListDto } from '../models';
// @ts-ignore
import type { PushListElementsResponse } from '../models';
// @ts-ignore
import type { SetListElementDto } from '../models';
// @ts-ignore
import type { SetListElementResponse } from '../models';
/**
 * BrowserListApi - axios parameter creator
 * @export
 */
export const BrowserListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set key to hold list data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerCreateListEncodingEnum} encoding 
         * @param {CreateListWithExpireDto} createListWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerCreateList: async (dbInstance: string, encoding: ListControllerCreateListEncodingEnum, createListWithExpireDto: CreateListWithExpireDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerCreateList', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerCreateList', 'encoding', encoding)
            // verify required parameter 'createListWithExpireDto' is not null or undefined
            assertParamExists('listControllerCreateList', 'createListWithExpireDto', createListWithExpireDto)
            const localVarPath = `/api/databases/{dbInstance}/list`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createListWithExpireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove and return the elements from the tail/head of list stored at key.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerDeleteElementEncodingEnum} encoding 
         * @param {DeleteListElementsDto} deleteListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerDeleteElement: async (dbInstance: string, encoding: ListControllerDeleteElementEncodingEnum, deleteListElementsDto: DeleteListElementsDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerDeleteElement', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerDeleteElement', 'encoding', encoding)
            // verify required parameter 'deleteListElementsDto' is not null or undefined
            assertParamExists('listControllerDeleteElement', 'deleteListElementsDto', deleteListElementsDto)
            const localVarPath = `/api/databases/{dbInstance}/list/elements`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteListElementsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get specified List element by index
         * @summary 
         * @param {number} index Zero-based index. 0 - first element, 1 - second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element
         * @param {string} dbInstance 
         * @param {ListControllerGetElementEncodingEnum} encoding 
         * @param {KeyDto} keyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerGetElement: async (index: number, dbInstance: string, encoding: ListControllerGetElementEncodingEnum, keyDto: KeyDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index' is not null or undefined
            assertParamExists('listControllerGetElement', 'index', index)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerGetElement', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerGetElement', 'encoding', encoding)
            // verify required parameter 'keyDto' is not null or undefined
            assertParamExists('listControllerGetElement', 'keyDto', keyDto)
            const localVarPath = `/api/databases/{dbInstance}/list/get-elements/{index}`
                .replace(`{${"index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get specified elements of the list stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerGetElementsEncodingEnum} encoding 
         * @param {GetListElementsDto} getListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerGetElements: async (dbInstance: string, encoding: ListControllerGetElementsEncodingEnum, getListElementsDto: GetListElementsDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerGetElements', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerGetElements', 'encoding', encoding)
            // verify required parameter 'getListElementsDto' is not null or undefined
            assertParamExists('listControllerGetElements', 'getListElementsDto', getListElementsDto)
            const localVarPath = `/api/databases/{dbInstance}/list/get-elements`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListElementsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert element at the head/tail of the List data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerPushElementEncodingEnum} encoding 
         * @param {PushElementToListDto} pushElementToListDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerPushElement: async (dbInstance: string, encoding: ListControllerPushElementEncodingEnum, pushElementToListDto: PushElementToListDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerPushElement', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerPushElement', 'encoding', encoding)
            // verify required parameter 'pushElementToListDto' is not null or undefined
            assertParamExists('listControllerPushElement', 'pushElementToListDto', pushElementToListDto)
            const localVarPath = `/api/databases/{dbInstance}/list`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pushElementToListDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update list element by index.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerUpdateElementEncodingEnum} encoding 
         * @param {SetListElementDto} setListElementDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerUpdateElement: async (dbInstance: string, encoding: ListControllerUpdateElementEncodingEnum, setListElementDto: SetListElementDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('listControllerUpdateElement', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('listControllerUpdateElement', 'encoding', encoding)
            // verify required parameter 'setListElementDto' is not null or undefined
            assertParamExists('listControllerUpdateElement', 'setListElementDto', setListElementDto)
            const localVarPath = `/api/databases/{dbInstance}/list`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setListElementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowserListApi - functional programming interface
 * @export
 */
export const BrowserListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowserListApiAxiosParamCreator(configuration)
    return {
        /**
         * Set key to hold list data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerCreateListEncodingEnum} encoding 
         * @param {CreateListWithExpireDto} createListWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerCreateList(dbInstance: string, encoding: ListControllerCreateListEncodingEnum, createListWithExpireDto: CreateListWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerCreateList(dbInstance, encoding, createListWithExpireDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerCreateList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove and return the elements from the tail/head of list stored at key.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerDeleteElementEncodingEnum} encoding 
         * @param {DeleteListElementsDto} deleteListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerDeleteElement(dbInstance: string, encoding: ListControllerDeleteElementEncodingEnum, deleteListElementsDto: DeleteListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteListElementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerDeleteElement(dbInstance, encoding, deleteListElementsDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerDeleteElement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get specified List element by index
         * @summary 
         * @param {number} index Zero-based index. 0 - first element, 1 - second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element
         * @param {string} dbInstance 
         * @param {ListControllerGetElementEncodingEnum} encoding 
         * @param {KeyDto} keyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerGetElement(index: number, dbInstance: string, encoding: ListControllerGetElementEncodingEnum, keyDto: KeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListElementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerGetElement(index, dbInstance, encoding, keyDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerGetElement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get specified elements of the list stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerGetElementsEncodingEnum} encoding 
         * @param {GetListElementsDto} getListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerGetElements(dbInstance: string, encoding: ListControllerGetElementsEncodingEnum, getListElementsDto: GetListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListElementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerGetElements(dbInstance, encoding, getListElementsDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerGetElements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Insert element at the head/tail of the List data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerPushElementEncodingEnum} encoding 
         * @param {PushElementToListDto} pushElementToListDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerPushElement(dbInstance: string, encoding: ListControllerPushElementEncodingEnum, pushElementToListDto: PushElementToListDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushListElementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerPushElement(dbInstance, encoding, pushElementToListDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerPushElement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update list element by index.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerUpdateElementEncodingEnum} encoding 
         * @param {SetListElementDto} setListElementDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listControllerUpdateElement(dbInstance: string, encoding: ListControllerUpdateElementEncodingEnum, setListElementDto: SetListElementDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetListElementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listControllerUpdateElement(dbInstance, encoding, setListElementDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BrowserListApi.listControllerUpdateElement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BrowserListApi - factory interface
 * @export
 */
export const BrowserListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowserListApiFp(configuration)
    return {
        /**
         * Set key to hold list data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerCreateListEncodingEnum} encoding 
         * @param {CreateListWithExpireDto} createListWithExpireDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerCreateList(dbInstance: string, encoding: ListControllerCreateListEncodingEnum, createListWithExpireDto: CreateListWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listControllerCreateList(dbInstance, encoding, createListWithExpireDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove and return the elements from the tail/head of list stored at key.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerDeleteElementEncodingEnum} encoding 
         * @param {DeleteListElementsDto} deleteListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerDeleteElement(dbInstance: string, encoding: ListControllerDeleteElementEncodingEnum, deleteListElementsDto: DeleteListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeleteListElementsResponse> {
            return localVarFp.listControllerDeleteElement(dbInstance, encoding, deleteListElementsDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get specified List element by index
         * @summary 
         * @param {number} index Zero-based index. 0 - first element, 1 - second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element
         * @param {string} dbInstance 
         * @param {ListControllerGetElementEncodingEnum} encoding 
         * @param {KeyDto} keyDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerGetElement(index: number, dbInstance: string, encoding: ListControllerGetElementEncodingEnum, keyDto: KeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetListElementResponse> {
            return localVarFp.listControllerGetElement(index, dbInstance, encoding, keyDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get specified elements of the list stored at key
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerGetElementsEncodingEnum} encoding 
         * @param {GetListElementsDto} getListElementsDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerGetElements(dbInstance: string, encoding: ListControllerGetElementsEncodingEnum, getListElementsDto: GetListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetListElementsResponse> {
            return localVarFp.listControllerGetElements(dbInstance, encoding, getListElementsDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Insert element at the head/tail of the List data type
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerPushElementEncodingEnum} encoding 
         * @param {PushElementToListDto} pushElementToListDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerPushElement(dbInstance: string, encoding: ListControllerPushElementEncodingEnum, pushElementToListDto: PushElementToListDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<PushListElementsResponse> {
            return localVarFp.listControllerPushElement(dbInstance, encoding, pushElementToListDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update list element by index.
         * @summary 
         * @param {string} dbInstance 
         * @param {ListControllerUpdateElementEncodingEnum} encoding 
         * @param {SetListElementDto} setListElementDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listControllerUpdateElement(dbInstance: string, encoding: ListControllerUpdateElementEncodingEnum, setListElementDto: SetListElementDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<SetListElementResponse> {
            return localVarFp.listControllerUpdateElement(dbInstance, encoding, setListElementDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrowserListApi - object-oriented interface
 * @export
 * @class BrowserListApi
 * @extends {BaseAPI}
 */
export class BrowserListApi extends BaseAPI {
    /**
     * Set key to hold list data type
     * @summary 
     * @param {string} dbInstance 
     * @param {ListControllerCreateListEncodingEnum} encoding 
     * @param {CreateListWithExpireDto} createListWithExpireDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerCreateList(dbInstance: string, encoding: ListControllerCreateListEncodingEnum, createListWithExpireDto: CreateListWithExpireDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerCreateList(dbInstance, encoding, createListWithExpireDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove and return the elements from the tail/head of list stored at key.
     * @summary 
     * @param {string} dbInstance 
     * @param {ListControllerDeleteElementEncodingEnum} encoding 
     * @param {DeleteListElementsDto} deleteListElementsDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerDeleteElement(dbInstance: string, encoding: ListControllerDeleteElementEncodingEnum, deleteListElementsDto: DeleteListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerDeleteElement(dbInstance, encoding, deleteListElementsDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get specified List element by index
     * @summary 
     * @param {number} index Zero-based index. 0 - first element, 1 - second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element
     * @param {string} dbInstance 
     * @param {ListControllerGetElementEncodingEnum} encoding 
     * @param {KeyDto} keyDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerGetElement(index: number, dbInstance: string, encoding: ListControllerGetElementEncodingEnum, keyDto: KeyDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerGetElement(index, dbInstance, encoding, keyDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get specified elements of the list stored at key
     * @summary 
     * @param {string} dbInstance 
     * @param {ListControllerGetElementsEncodingEnum} encoding 
     * @param {GetListElementsDto} getListElementsDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerGetElements(dbInstance: string, encoding: ListControllerGetElementsEncodingEnum, getListElementsDto: GetListElementsDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerGetElements(dbInstance, encoding, getListElementsDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Insert element at the head/tail of the List data type
     * @summary 
     * @param {string} dbInstance 
     * @param {ListControllerPushElementEncodingEnum} encoding 
     * @param {PushElementToListDto} pushElementToListDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerPushElement(dbInstance: string, encoding: ListControllerPushElementEncodingEnum, pushElementToListDto: PushElementToListDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerPushElement(dbInstance, encoding, pushElementToListDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update list element by index.
     * @summary 
     * @param {string} dbInstance 
     * @param {ListControllerUpdateElementEncodingEnum} encoding 
     * @param {SetListElementDto} setListElementDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowserListApi
     */
    public listControllerUpdateElement(dbInstance: string, encoding: ListControllerUpdateElementEncodingEnum, setListElementDto: SetListElementDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BrowserListApiFp(this.configuration).listControllerUpdateElement(dbInstance, encoding, setListElementDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListControllerCreateListEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerCreateListEncodingEnum = typeof ListControllerCreateListEncodingEnum[keyof typeof ListControllerCreateListEncodingEnum];
/**
 * @export
 */
export const ListControllerDeleteElementEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerDeleteElementEncodingEnum = typeof ListControllerDeleteElementEncodingEnum[keyof typeof ListControllerDeleteElementEncodingEnum];
/**
 * @export
 */
export const ListControllerGetElementEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerGetElementEncodingEnum = typeof ListControllerGetElementEncodingEnum[keyof typeof ListControllerGetElementEncodingEnum];
/**
 * @export
 */
export const ListControllerGetElementsEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerGetElementsEncodingEnum = typeof ListControllerGetElementsEncodingEnum[keyof typeof ListControllerGetElementsEncodingEnum];
/**
 * @export
 */
export const ListControllerPushElementEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerPushElementEncodingEnum = typeof ListControllerPushElementEncodingEnum[keyof typeof ListControllerPushElementEncodingEnum];
/**
 * @export
 */
export const ListControllerUpdateElementEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type ListControllerUpdateElementEncodingEnum = typeof ListControllerUpdateElementEncodingEnum[keyof typeof ListControllerUpdateElementEncodingEnum];
