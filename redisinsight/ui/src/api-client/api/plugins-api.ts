/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateCommandExecutionDto } from '../models';
// @ts-ignore
import type { CreatePluginStateDto } from '../models';
// @ts-ignore
import type { PluginCommandExecution } from '../models';
// @ts-ignore
import type { PluginState } from '../models';
// @ts-ignore
import type { PluginsResponse } from '../models';
/**
 * PluginsApi - axios parameter creator
 * @export
 */
export const PluginsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get list of available plugins
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Redis whitelist commands available for plugins
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerGetPluginCommands: async (dbInstance: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('pluginsControllerGetPluginCommands', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/plugins/commands`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get previously saved state
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerGetState: async (visualizationId: string, id: string, dbInstance: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visualizationId' is not null or undefined
            assertParamExists('pluginsControllerGetState', 'visualizationId', visualizationId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pluginsControllerGetState', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('pluginsControllerGetState', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/plugins/{visualizationId}/command-executions/{id}/state`
                .replace(`{${"visualizationId"}}`, encodeURIComponent(String(visualizationId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save plugin state for particular command execution
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {CreatePluginStateDto} createPluginStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerSaveState: async (visualizationId: string, id: string, dbInstance: string, createPluginStateDto: CreatePluginStateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visualizationId' is not null or undefined
            assertParamExists('pluginsControllerSaveState', 'visualizationId', visualizationId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pluginsControllerSaveState', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('pluginsControllerSaveState', 'dbInstance', dbInstance)
            // verify required parameter 'createPluginStateDto' is not null or undefined
            assertParamExists('pluginsControllerSaveState', 'createPluginStateDto', createPluginStateDto)
            const localVarPath = `/api/databases/{dbInstance}/plugins/{visualizationId}/command-executions/{id}/state`
                .replace(`{${"visualizationId"}}`, encodeURIComponent(String(visualizationId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPluginStateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send Redis Command from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionDto} createCommandExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerSendCommand: async (dbInstance: string, createCommandExecutionDto: CreateCommandExecutionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('pluginsControllerSendCommand', 'dbInstance', dbInstance)
            // verify required parameter 'createCommandExecutionDto' is not null or undefined
            assertParamExists('pluginsControllerSendCommand', 'createCommandExecutionDto', createCommandExecutionDto)
            const localVarPath = `/api/databases/{dbInstance}/plugins/command-executions`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommandExecutionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginsApi - functional programming interface
 * @export
 */
export const PluginsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get list of available plugins
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.pluginControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Redis whitelist commands available for plugins
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginsControllerGetPluginCommands(dbInstance: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginsControllerGetPluginCommands(dbInstance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.pluginsControllerGetPluginCommands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get previously saved state
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginsControllerGetState(visualizationId: string, id: string, dbInstance: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginsControllerGetState(visualizationId, id, dbInstance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.pluginsControllerGetState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Save plugin state for particular command execution
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {CreatePluginStateDto} createPluginStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginsControllerSaveState(visualizationId: string, id: string, dbInstance: string, createPluginStateDto: CreatePluginStateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginsControllerSaveState(visualizationId, id, dbInstance, createPluginStateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.pluginsControllerSaveState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send Redis Command from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionDto} createCommandExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginsControllerSendCommand(dbInstance: string, createCommandExecutionDto: CreateCommandExecutionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginCommandExecution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginsControllerSendCommand(dbInstance, createCommandExecutionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.pluginsControllerSendCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PluginsApi - factory interface
 * @export
 */
export const PluginsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginsApiFp(configuration)
    return {
        /**
         * Get list of available plugins
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<PluginsResponse> {
            return localVarFp.pluginControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Redis whitelist commands available for plugins
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerGetPluginCommands(dbInstance: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.pluginsControllerGetPluginCommands(dbInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * Get previously saved state
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerGetState(visualizationId: string, id: string, dbInstance: string, options?: RawAxiosRequestConfig): AxiosPromise<PluginState> {
            return localVarFp.pluginsControllerGetState(visualizationId, id, dbInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * Save plugin state for particular command execution
         * @summary 
         * @param {string} visualizationId 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {CreatePluginStateDto} createPluginStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerSaveState(visualizationId: string, id: string, dbInstance: string, createPluginStateDto: CreatePluginStateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginsControllerSaveState(visualizationId, id, dbInstance, createPluginStateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Send Redis Command from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionDto} createCommandExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginsControllerSendCommand(dbInstance: string, createCommandExecutionDto: CreateCommandExecutionDto, options?: RawAxiosRequestConfig): AxiosPromise<PluginCommandExecution> {
            return localVarFp.pluginsControllerSendCommand(dbInstance, createCommandExecutionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PluginsApi - object-oriented interface
 * @export
 * @class PluginsApi
 * @extends {BaseAPI}
 */
export class PluginsApi extends BaseAPI {
    /**
     * Get list of available plugins
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public pluginControllerGetAll(options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).pluginControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Redis whitelist commands available for plugins
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public pluginsControllerGetPluginCommands(dbInstance: string, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).pluginsControllerGetPluginCommands(dbInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get previously saved state
     * @summary 
     * @param {string} visualizationId 
     * @param {string} id 
     * @param {string} dbInstance Database instance id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public pluginsControllerGetState(visualizationId: string, id: string, dbInstance: string, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).pluginsControllerGetState(visualizationId, id, dbInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save plugin state for particular command execution
     * @summary 
     * @param {string} visualizationId 
     * @param {string} id 
     * @param {string} dbInstance Database instance id.
     * @param {CreatePluginStateDto} createPluginStateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public pluginsControllerSaveState(visualizationId: string, id: string, dbInstance: string, createPluginStateDto: CreatePluginStateDto, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).pluginsControllerSaveState(visualizationId, id, dbInstance, createPluginStateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send Redis Command from the Workbench
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {CreateCommandExecutionDto} createCommandExecutionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public pluginsControllerSendCommand(dbInstance: string, createCommandExecutionDto: CreateCommandExecutionDto, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).pluginsControllerSendCommand(dbInstance, createCommandExecutionDto, options).then((request) => request(this.axios, this.basePath));
    }
}

