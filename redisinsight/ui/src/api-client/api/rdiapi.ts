/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRdiDto } from '../models';
// @ts-ignore
import type { Rdi } from '../models';
// @ts-ignore
import type { RdiDryRunJobDto } from '../models';
// @ts-ignore
import type { RdiDryRunJobResponseDto } from '../models';
// @ts-ignore
import type { RdiTemplateResponseDto } from '../models';
// @ts-ignore
import type { RdiTestConnectionsResponseDto } from '../models';
// @ts-ignore
import type { UpdateRdiDto } from '../models';
/**
 * RDIApi - axios parameter creator
 * @export
 */
export const RDIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Connect to RDI
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerConnect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiControllerConnect', 'id', id)
            const localVarPath = `/api/rdi/{id}/connect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create RDI
         * @summary 
         * @param {CreateRdiDto} createRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerCreate: async (createRdiDto: CreateRdiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRdiDto' is not null or undefined
            assertParamExists('rdiControllerCreate', 'createRdiDto', createRdiDto)
            const localVarPath = `/api/rdi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRdiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete RDI
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rdi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get RDI by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiControllerGet', 'id', id)
            const localVarPath = `/api/rdi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get RDI list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rdi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update RDI
         * @summary 
         * @param {string} id 
         * @param {UpdateRdiDto} updateRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerUpdate: async (id: string, updateRdiDto: UpdateRdiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiControllerUpdate', 'id', id)
            // verify required parameter 'updateRdiDto' is not null or undefined
            assertParamExists('rdiControllerUpdate', 'updateRdiDto', updateRdiDto)
            const localVarPath = `/api/rdi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRdiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy the pipeline
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerDeploy: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerDeploy', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rdiPipelineControllerDeploy', 'body', body)
            const localVarPath = `/api/rdi/{id}/pipeline/deploy`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Dry run job
         * @summary 
         * @param {string} id 
         * @param {RdiDryRunJobDto} rdiDryRunJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerDryRunJob: async (id: string, rdiDryRunJobDto: RdiDryRunJobDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerDryRunJob', 'id', id)
            // verify required parameter 'rdiDryRunJobDto' is not null or undefined
            assertParamExists('rdiPipelineControllerDryRunJob', 'rdiDryRunJobDto', rdiDryRunJobDto)
            const localVarPath = `/api/rdi/{id}/pipeline/dry-run-job`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rdiDryRunJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get config template for selected pipeline and db types
         * @summary 
         * @param {string} pipelineType 
         * @param {string} dbType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetConfigTemplate: async (pipelineType: string, dbType: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineType' is not null or undefined
            assertParamExists('rdiPipelineControllerGetConfigTemplate', 'pipelineType', pipelineType)
            // verify required parameter 'dbType' is not null or undefined
            assertParamExists('rdiPipelineControllerGetConfigTemplate', 'dbType', dbType)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetConfigTemplate', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/config/template/{pipelineType}/{dbType}`
                .replace(`{${"pipelineType"}}`, encodeURIComponent(String(pipelineType)))
                .replace(`{${"dbType"}}`, encodeURIComponent(String(dbType)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job functions
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetJobFunctions: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetJobFunctions', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/job-functions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job template for selected pipeline type
         * @summary 
         * @param {string} pipelineType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetJobTemplate: async (pipelineType: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineType' is not null or undefined
            assertParamExists('rdiPipelineControllerGetJobTemplate', 'pipelineType', pipelineType)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetJobTemplate', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/job/template/{pipelineType}`
                .replace(`{${"pipelineType"}}`, encodeURIComponent(String(pipelineType)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetPipeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetPipeline', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pipeline status
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetPipelineStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetPipelineStatus', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pipeline schema
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetSchema: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetSchema', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/schema`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get pipeline strategies and db types for template
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetStrategies: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerGetStrategies', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/strategies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets default pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerResetPipeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerResetPipeline', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the stopped pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerStartPipeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerStartPipeline', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stops running pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerStopPipeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerStopPipeline', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test target connections
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerTestConnections: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiPipelineControllerTestConnections', 'id', id)
            const localVarPath = `/api/rdi/{id}/pipeline/test-connections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get statistics
         * @summary 
         * @param {string} id 
         * @param {string} [sections] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiStatisticsControllerGetStatistics: async (id: string, sections?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rdiStatisticsControllerGetStatistics', 'id', id)
            const localVarPath = `/api/rdi/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sections !== undefined) {
                localVarQueryParameter['sections'] = sections;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RDIApi - functional programming interface
 * @export
 */
export const RDIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RDIApiAxiosParamCreator(configuration)
    return {
        /**
         * Connect to RDI
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerConnect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerConnect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerConnect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create RDI
         * @summary 
         * @param {CreateRdiDto} createRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerCreate(createRdiDto: CreateRdiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rdi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerCreate(createRdiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete RDI
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get RDI by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rdi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get RDI list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rdi>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update RDI
         * @summary 
         * @param {string} id 
         * @param {UpdateRdiDto} updateRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiControllerUpdate(id: string, updateRdiDto: UpdateRdiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rdi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiControllerUpdate(id, updateRdiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deploy the pipeline
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerDeploy(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerDeploy(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerDeploy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Dry run job
         * @summary 
         * @param {string} id 
         * @param {RdiDryRunJobDto} rdiDryRunJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerDryRunJob(id: string, rdiDryRunJobDto: RdiDryRunJobDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RdiDryRunJobResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerDryRunJob(id, rdiDryRunJobDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerDryRunJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get config template for selected pipeline and db types
         * @summary 
         * @param {string} pipelineType 
         * @param {string} dbType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetConfigTemplate(pipelineType: string, dbType: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RdiTemplateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetConfigTemplate(pipelineType, dbType, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetConfigTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get job functions
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetJobFunctions(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetJobFunctions(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetJobFunctions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get job template for selected pipeline type
         * @summary 
         * @param {string} pipelineType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetJobTemplate(pipelineType: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RdiTemplateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetJobTemplate(pipelineType, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetJobTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetPipeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetPipeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get pipeline status
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetPipelineStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetPipelineStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetPipelineStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get pipeline schema
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetSchema(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetSchema(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get pipeline strategies and db types for template
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerGetStrategies(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerGetStrategies(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerGetStrategies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resets default pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerResetPipeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerResetPipeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerResetPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Starts the stopped pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerStartPipeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerStartPipeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerStartPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stops running pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerStopPipeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerStopPipeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerStopPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test target connections
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiPipelineControllerTestConnections(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RdiTestConnectionsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiPipelineControllerTestConnections(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiPipelineControllerTestConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get statistics
         * @summary 
         * @param {string} id 
         * @param {string} [sections] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rdiStatisticsControllerGetStatistics(id: string, sections?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rdiStatisticsControllerGetStatistics(id, sections, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RDIApi.rdiStatisticsControllerGetStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RDIApi - factory interface
 * @export
 */
export const RDIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RDIApiFp(configuration)
    return {
        /**
         * Connect to RDI
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerConnect(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiControllerConnect(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create RDI
         * @summary 
         * @param {CreateRdiDto} createRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerCreate(createRdiDto: CreateRdiDto, options?: RawAxiosRequestConfig): AxiosPromise<Rdi> {
            return localVarFp.rdiControllerCreate(createRdiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete RDI
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiControllerDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Get RDI by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Rdi> {
            return localVarFp.rdiControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get RDI list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Rdi>> {
            return localVarFp.rdiControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update RDI
         * @summary 
         * @param {string} id 
         * @param {UpdateRdiDto} updateRdiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiControllerUpdate(id: string, updateRdiDto: UpdateRdiDto, options?: RawAxiosRequestConfig): AxiosPromise<Rdi> {
            return localVarFp.rdiControllerUpdate(id, updateRdiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy the pipeline
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerDeploy(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerDeploy(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Dry run job
         * @summary 
         * @param {string} id 
         * @param {RdiDryRunJobDto} rdiDryRunJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerDryRunJob(id: string, rdiDryRunJobDto: RdiDryRunJobDto, options?: RawAxiosRequestConfig): AxiosPromise<RdiDryRunJobResponseDto> {
            return localVarFp.rdiPipelineControllerDryRunJob(id, rdiDryRunJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get config template for selected pipeline and db types
         * @summary 
         * @param {string} pipelineType 
         * @param {string} dbType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetConfigTemplate(pipelineType: string, dbType: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<RdiTemplateResponseDto> {
            return localVarFp.rdiPipelineControllerGetConfigTemplate(pipelineType, dbType, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get job functions
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetJobFunctions(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerGetJobFunctions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get job template for selected pipeline type
         * @summary 
         * @param {string} pipelineType 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetJobTemplate(pipelineType: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<RdiTemplateResponseDto> {
            return localVarFp.rdiPipelineControllerGetJobTemplate(pipelineType, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetPipeline(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.rdiPipelineControllerGetPipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pipeline status
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetPipelineStatus(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerGetPipelineStatus(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pipeline schema
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetSchema(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.rdiPipelineControllerGetSchema(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pipeline strategies and db types for template
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerGetStrategies(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.rdiPipelineControllerGetStrategies(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets default pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerResetPipeline(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerResetPipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts the stopped pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerStartPipeline(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerStartPipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Stops running pipeline
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerStopPipeline(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rdiPipelineControllerStopPipeline(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Test target connections
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiPipelineControllerTestConnections(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RdiTestConnectionsResponseDto> {
            return localVarFp.rdiPipelineControllerTestConnections(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get statistics
         * @summary 
         * @param {string} id 
         * @param {string} [sections] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rdiStatisticsControllerGetStatistics(id: string, sections?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.rdiStatisticsControllerGetStatistics(id, sections, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RDIApi - object-oriented interface
 * @export
 * @class RDIApi
 * @extends {BaseAPI}
 */
export class RDIApi extends BaseAPI {
    /**
     * Connect to RDI
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerConnect(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerConnect(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create RDI
     * @summary 
     * @param {CreateRdiDto} createRdiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerCreate(createRdiDto: CreateRdiDto, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerCreate(createRdiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete RDI
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerDelete(options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get RDI by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerGet(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get RDI list
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerList(options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update RDI
     * @summary 
     * @param {string} id 
     * @param {UpdateRdiDto} updateRdiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiControllerUpdate(id: string, updateRdiDto: UpdateRdiDto, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiControllerUpdate(id, updateRdiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy the pipeline
     * @summary 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerDeploy(id: string, body: object, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerDeploy(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Dry run job
     * @summary 
     * @param {string} id 
     * @param {RdiDryRunJobDto} rdiDryRunJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerDryRunJob(id: string, rdiDryRunJobDto: RdiDryRunJobDto, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerDryRunJob(id, rdiDryRunJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get config template for selected pipeline and db types
     * @summary 
     * @param {string} pipelineType 
     * @param {string} dbType 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetConfigTemplate(pipelineType: string, dbType: string, id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetConfigTemplate(pipelineType, dbType, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job functions
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetJobFunctions(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetJobFunctions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job template for selected pipeline type
     * @summary 
     * @param {string} pipelineType 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetJobTemplate(pipelineType: string, id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetJobTemplate(pipelineType, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pipeline
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetPipeline(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetPipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pipeline status
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetPipelineStatus(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetPipelineStatus(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pipeline schema
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetSchema(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetSchema(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get pipeline strategies and db types for template
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerGetStrategies(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerGetStrategies(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets default pipeline
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerResetPipeline(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerResetPipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts the stopped pipeline
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerStartPipeline(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerStartPipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stops running pipeline
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerStopPipeline(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerStopPipeline(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test target connections
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiPipelineControllerTestConnections(id: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiPipelineControllerTestConnections(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get statistics
     * @summary 
     * @param {string} id 
     * @param {string} [sections] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RDIApi
     */
    public rdiStatisticsControllerGetStatistics(id: string, sections?: string, options?: RawAxiosRequestConfig) {
        return RDIApiFp(this.configuration).rdiStatisticsControllerGetStatistics(id, sections, options).then((request) => request(this.axios, this.basePath));
    }
}

