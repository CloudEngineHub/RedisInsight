/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommandExecution } from '../models';
// @ts-ignore
import type { CommandExecutionFilter } from '../models';
// @ts-ignore
import type { CreateCommandExecutionsDto } from '../models';
// @ts-ignore
import type { ShortCommandExecution } from '../models';
/**
 * WorkbenchApi - axios parameter creator
 * @export
 */
export const WorkbenchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete command execution
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerDeleteCommandExecution: async (id: string, dbInstance: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workbenchControllerDeleteCommandExecution', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('workbenchControllerDeleteCommandExecution', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/workbench/command-executions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CommandExecutionFilter} commandExecutionFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerDeleteCommandExecutions: async (dbInstance: string, commandExecutionFilter: CommandExecutionFilter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('workbenchControllerDeleteCommandExecutions', 'dbInstance', dbInstance)
            // verify required parameter 'commandExecutionFilter' is not null or undefined
            assertParamExists('workbenchControllerDeleteCommandExecutions', 'commandExecutionFilter', commandExecutionFilter)
            const localVarPath = `/api/databases/{dbInstance}/workbench/command-executions`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commandExecutionFilter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get command execution details
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerGetCommandExecution: async (id: string, dbInstance: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workbenchControllerGetCommandExecution', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('workbenchControllerGetCommandExecution', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/workbench/command-executions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {WorkbenchControllerListCommandExecutionsTypeEnum} [type] Command execution type. Used to distinguish between search and workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerListCommandExecutions: async (dbInstance: string, type?: WorkbenchControllerListCommandExecutionsTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('workbenchControllerListCommandExecutions', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/workbench/command-executions`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send Redis Batch Commands from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionsDto} createCommandExecutionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerSendCommands: async (dbInstance: string, createCommandExecutionsDto: CreateCommandExecutionsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('workbenchControllerSendCommands', 'dbInstance', dbInstance)
            // verify required parameter 'createCommandExecutionsDto' is not null or undefined
            assertParamExists('workbenchControllerSendCommands', 'createCommandExecutionsDto', createCommandExecutionsDto)
            const localVarPath = `/api/databases/{dbInstance}/workbench/command-executions`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommandExecutionsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkbenchApi - functional programming interface
 * @export
 */
export const WorkbenchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkbenchApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete command execution
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workbenchControllerDeleteCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workbenchControllerDeleteCommandExecution(id, dbInstance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkbenchApi.workbenchControllerDeleteCommandExecution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CommandExecutionFilter} commandExecutionFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workbenchControllerDeleteCommandExecutions(dbInstance: string, commandExecutionFilter: CommandExecutionFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workbenchControllerDeleteCommandExecutions(dbInstance, commandExecutionFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkbenchApi.workbenchControllerDeleteCommandExecutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get command execution details
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workbenchControllerGetCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandExecution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workbenchControllerGetCommandExecution(id, dbInstance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkbenchApi.workbenchControllerGetCommandExecution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {WorkbenchControllerListCommandExecutionsTypeEnum} [type] Command execution type. Used to distinguish between search and workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workbenchControllerListCommandExecutions(dbInstance: string, type?: WorkbenchControllerListCommandExecutionsTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortCommandExecution>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workbenchControllerListCommandExecutions(dbInstance, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkbenchApi.workbenchControllerListCommandExecutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send Redis Batch Commands from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionsDto} createCommandExecutionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workbenchControllerSendCommands(dbInstance: string, createCommandExecutionsDto: CreateCommandExecutionsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandExecution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workbenchControllerSendCommands(dbInstance, createCommandExecutionsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkbenchApi.workbenchControllerSendCommands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkbenchApi - factory interface
 * @export
 */
export const WorkbenchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkbenchApiFp(configuration)
    return {
        /**
         * Delete command execution
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerDeleteCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workbenchControllerDeleteCommandExecution(id, dbInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CommandExecutionFilter} commandExecutionFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerDeleteCommandExecutions(dbInstance: string, commandExecutionFilter: CommandExecutionFilter, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.workbenchControllerDeleteCommandExecutions(dbInstance, commandExecutionFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get command execution details
         * @summary 
         * @param {string} id 
         * @param {string} dbInstance Database instance id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerGetCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig): AxiosPromise<CommandExecution> {
            return localVarFp.workbenchControllerGetCommandExecution(id, dbInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * List of command executions
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {WorkbenchControllerListCommandExecutionsTypeEnum} [type] Command execution type. Used to distinguish between search and workbench
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerListCommandExecutions(dbInstance: string, type?: WorkbenchControllerListCommandExecutionsTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShortCommandExecution>> {
            return localVarFp.workbenchControllerListCommandExecutions(dbInstance, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Send Redis Batch Commands from the Workbench
         * @summary 
         * @param {string} dbInstance Database instance id.
         * @param {CreateCommandExecutionsDto} createCommandExecutionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workbenchControllerSendCommands(dbInstance: string, createCommandExecutionsDto: CreateCommandExecutionsDto, options?: RawAxiosRequestConfig): AxiosPromise<CommandExecution> {
            return localVarFp.workbenchControllerSendCommands(dbInstance, createCommandExecutionsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkbenchApi - object-oriented interface
 * @export
 * @class WorkbenchApi
 * @extends {BaseAPI}
 */
export class WorkbenchApi extends BaseAPI {
    /**
     * Delete command execution
     * @summary 
     * @param {string} id 
     * @param {string} dbInstance Database instance id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkbenchApi
     */
    public workbenchControllerDeleteCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig) {
        return WorkbenchApiFp(this.configuration).workbenchControllerDeleteCommandExecution(id, dbInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete command executions
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {CommandExecutionFilter} commandExecutionFilter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkbenchApi
     */
    public workbenchControllerDeleteCommandExecutions(dbInstance: string, commandExecutionFilter: CommandExecutionFilter, options?: RawAxiosRequestConfig) {
        return WorkbenchApiFp(this.configuration).workbenchControllerDeleteCommandExecutions(dbInstance, commandExecutionFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get command execution details
     * @summary 
     * @param {string} id 
     * @param {string} dbInstance Database instance id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkbenchApi
     */
    public workbenchControllerGetCommandExecution(id: string, dbInstance: string, options?: RawAxiosRequestConfig) {
        return WorkbenchApiFp(this.configuration).workbenchControllerGetCommandExecution(id, dbInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of command executions
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {WorkbenchControllerListCommandExecutionsTypeEnum} [type] Command execution type. Used to distinguish between search and workbench
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkbenchApi
     */
    public workbenchControllerListCommandExecutions(dbInstance: string, type?: WorkbenchControllerListCommandExecutionsTypeEnum, options?: RawAxiosRequestConfig) {
        return WorkbenchApiFp(this.configuration).workbenchControllerListCommandExecutions(dbInstance, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send Redis Batch Commands from the Workbench
     * @summary 
     * @param {string} dbInstance Database instance id.
     * @param {CreateCommandExecutionsDto} createCommandExecutionsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkbenchApi
     */
    public workbenchControllerSendCommands(dbInstance: string, createCommandExecutionsDto: CreateCommandExecutionsDto, options?: RawAxiosRequestConfig) {
        return WorkbenchApiFp(this.configuration).workbenchControllerSendCommands(dbInstance, createCommandExecutionsDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const WorkbenchControllerListCommandExecutionsTypeEnum = {
    Workbench: 'WORKBENCH',
    Search: 'SEARCH'
} as const;
export type WorkbenchControllerListCommandExecutionsTypeEnum = typeof WorkbenchControllerListCommandExecutionsTypeEnum[keyof typeof WorkbenchControllerListCommandExecutionsTypeEnum];
