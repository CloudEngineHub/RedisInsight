/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CloudAccountInfo } from '../models';
// @ts-ignore
import type { CloudDatabase } from '../models';
// @ts-ignore
import type { CloudSubscription } from '../models';
// @ts-ignore
import type { DiscoverCloudDatabasesDto } from '../models';
// @ts-ignore
import type { ImportCloudDatabaseResponse } from '../models';
// @ts-ignore
import type { ImportCloudDatabasesDto } from '../models';
/**
 * CloudAutodiscoveryApi - axios parameter creator
 * @export
 */
export const CloudAutodiscoveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerAddDiscoveredDatabases: async (importCloudDatabasesDto: ImportCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importCloudDatabasesDto' is not null or undefined
            assertParamExists('cloudAutodiscoveryControllerAddDiscoveredDatabases', 'importCloudDatabasesDto', importCloudDatabasesDto)
            const localVarPath = `/api/cloud/autodiscovery/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xCloudApiKey != null) {
                localVarHeaderParameter['x-cloud-api-key'] = String(xCloudApiKey);
            }
            if (xCloudApiSecret != null) {
                localVarHeaderParameter['x-cloud-api-secret'] = String(xCloudApiSecret);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importCloudDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerDiscoverDatabases: async (discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discoverCloudDatabasesDto' is not null or undefined
            assertParamExists('cloudAutodiscoveryControllerDiscoverDatabases', 'discoverCloudDatabasesDto', discoverCloudDatabasesDto)
            const localVarPath = `/api/cloud/autodiscovery/get-databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xCloudApiKey != null) {
                localVarHeaderParameter['x-cloud-api-key'] = String(xCloudApiKey);
            }
            if (xCloudApiSecret != null) {
                localVarHeaderParameter['x-cloud-api-secret'] = String(xCloudApiSecret);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(discoverCloudDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerDiscoverSubscriptions: async (xCloudApiKey?: string, xCloudApiSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/autodiscovery/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xCloudApiKey != null) {
                localVarHeaderParameter['x-cloud-api-key'] = String(xCloudApiKey);
            }
            if (xCloudApiSecret != null) {
                localVarHeaderParameter['x-cloud-api-secret'] = String(xCloudApiSecret);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerGetAccount: async (xCloudApiKey?: string, xCloudApiSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/autodiscovery/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xCloudApiKey != null) {
                localVarHeaderParameter['x-cloud-api-key'] = String(xCloudApiKey);
            }
            if (xCloudApiSecret != null) {
                localVarHeaderParameter['x-cloud-api-secret'] = String(xCloudApiSecret);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerAddDiscoveredDatabases: async (importCloudDatabasesDto: ImportCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importCloudDatabasesDto' is not null or undefined
            assertParamExists('meCloudAutodiscoveryControllerAddDiscoveredDatabases', 'importCloudDatabasesDto', importCloudDatabasesDto)
            const localVarPath = `/api/cloud/me/autodiscovery/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }

            if (campaign !== undefined) {
                localVarQueryParameter['campaign'] = campaign;
            }

            if (amp !== undefined) {
                localVarQueryParameter['amp'] = amp;
            }

            if (_package !== undefined) {
                localVarQueryParameter['package'] = _package;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importCloudDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerDiscoverDatabases: async (discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discoverCloudDatabasesDto' is not null or undefined
            assertParamExists('meCloudAutodiscoveryControllerDiscoverDatabases', 'discoverCloudDatabasesDto', discoverCloudDatabasesDto)
            const localVarPath = `/api/cloud/me/autodiscovery/get-databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }

            if (campaign !== undefined) {
                localVarQueryParameter['campaign'] = campaign;
            }

            if (amp !== undefined) {
                localVarQueryParameter['amp'] = amp;
            }

            if (_package !== undefined) {
                localVarQueryParameter['package'] = _package;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(discoverCloudDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerDiscoverSubscriptions: async (source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/me/autodiscovery/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }

            if (campaign !== undefined) {
                localVarQueryParameter['campaign'] = campaign;
            }

            if (amp !== undefined) {
                localVarQueryParameter['amp'] = amp;
            }

            if (_package !== undefined) {
                localVarQueryParameter['package'] = _package;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerGetAccount: async (source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cloud/me/autodiscovery/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }

            if (campaign !== undefined) {
                localVarQueryParameter['campaign'] = campaign;
            }

            if (amp !== undefined) {
                localVarQueryParameter['amp'] = amp;
            }

            if (_package !== undefined) {
                localVarQueryParameter['package'] = _package;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudAutodiscoveryApi - functional programming interface
 * @export
 */
export const CloudAutodiscoveryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudAutodiscoveryApiAxiosParamCreator(configuration)
    return {
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImportCloudDatabaseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.cloudAutodiscoveryControllerAddDiscoveredDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudDatabase>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.cloudAutodiscoveryControllerDiscoverDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey, xCloudApiSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.cloudAutodiscoveryControllerDiscoverSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudAutodiscoveryControllerGetAccount(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudAccountInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudAutodiscoveryControllerGetAccount(xCloudApiKey, xCloudApiSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.cloudAutodiscoveryControllerGetAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImportCloudDatabaseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, source, medium, campaign, amp, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.meCloudAutodiscoveryControllerAddDiscoveredDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudDatabase>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, source, medium, campaign, amp, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.meCloudAutodiscoveryControllerDiscoverDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meCloudAutodiscoveryControllerDiscoverSubscriptions(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meCloudAutodiscoveryControllerDiscoverSubscriptions(source, medium, campaign, amp, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.meCloudAutodiscoveryControllerDiscoverSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meCloudAutodiscoveryControllerGetAccount(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudAccountInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meCloudAutodiscoveryControllerGetAccount(source, medium, campaign, amp, _package, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudAutodiscoveryApi.meCloudAutodiscoveryControllerGetAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudAutodiscoveryApi - factory interface
 * @export
 */
export const CloudAutodiscoveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudAutodiscoveryApiFp(configuration)
    return {
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImportCloudDatabaseResponse>> {
            return localVarFp.cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudDatabase>> {
            return localVarFp.cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudSubscription>> {
            return localVarFp.cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey, xCloudApiSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [xCloudApiKey] 
         * @param {string} [xCloudApiSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudAutodiscoveryControllerGetAccount(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudAccountInfo> {
            return localVarFp.cloudAutodiscoveryControllerGetAccount(xCloudApiKey, xCloudApiSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Add databases from Redis Enterprise Cloud Pro account.
         * @summary 
         * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImportCloudDatabaseResponse>> {
            return localVarFp.meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, source, medium, campaign, amp, _package, options).then((request) => request(axios, basePath));
        },
        /**
         * Get databases belonging to subscriptions
         * @summary 
         * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudDatabase>> {
            return localVarFp.meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, source, medium, campaign, amp, _package, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about current accountâ€™s subscriptions.
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerDiscoverSubscriptions(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudSubscription>> {
            return localVarFp.meCloudAutodiscoveryControllerDiscoverSubscriptions(source, medium, campaign, amp, _package, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current account
         * @summary 
         * @param {string} [source] 
         * @param {string} [medium] 
         * @param {string} [campaign] 
         * @param {string} [amp] 
         * @param {string} [_package] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meCloudAutodiscoveryControllerGetAccount(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudAccountInfo> {
            return localVarFp.meCloudAutodiscoveryControllerGetAccount(source, medium, campaign, amp, _package, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudAutodiscoveryApi - object-oriented interface
 * @export
 * @class CloudAutodiscoveryApi
 * @extends {BaseAPI}
 */
export class CloudAutodiscoveryApi extends BaseAPI {
    /**
     * Add databases from Redis Enterprise Cloud Pro account.
     * @summary 
     * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
     * @param {string} [xCloudApiKey] 
     * @param {string} [xCloudApiSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).cloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get databases belonging to subscriptions
     * @summary 
     * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
     * @param {string} [xCloudApiKey] 
     * @param {string} [xCloudApiSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).cloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, xCloudApiKey, xCloudApiSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about current accountâ€™s subscriptions.
     * @summary 
     * @param {string} [xCloudApiKey] 
     * @param {string} [xCloudApiSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).cloudAutodiscoveryControllerDiscoverSubscriptions(xCloudApiKey, xCloudApiSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account
     * @summary 
     * @param {string} [xCloudApiKey] 
     * @param {string} [xCloudApiSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public cloudAutodiscoveryControllerGetAccount(xCloudApiKey?: string, xCloudApiSecret?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).cloudAutodiscoveryControllerGetAccount(xCloudApiKey, xCloudApiSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add databases from Redis Enterprise Cloud Pro account.
     * @summary 
     * @param {ImportCloudDatabasesDto} importCloudDatabasesDto 
     * @param {string} [source] 
     * @param {string} [medium] 
     * @param {string} [campaign] 
     * @param {string} [amp] 
     * @param {string} [_package] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto: ImportCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).meCloudAutodiscoveryControllerAddDiscoveredDatabases(importCloudDatabasesDto, source, medium, campaign, amp, _package, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get databases belonging to subscriptions
     * @summary 
     * @param {DiscoverCloudDatabasesDto} discoverCloudDatabasesDto 
     * @param {string} [source] 
     * @param {string} [medium] 
     * @param {string} [campaign] 
     * @param {string} [amp] 
     * @param {string} [_package] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto: DiscoverCloudDatabasesDto, source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).meCloudAutodiscoveryControllerDiscoverDatabases(discoverCloudDatabasesDto, source, medium, campaign, amp, _package, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about current accountâ€™s subscriptions.
     * @summary 
     * @param {string} [source] 
     * @param {string} [medium] 
     * @param {string} [campaign] 
     * @param {string} [amp] 
     * @param {string} [_package] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public meCloudAutodiscoveryControllerDiscoverSubscriptions(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).meCloudAutodiscoveryControllerDiscoverSubscriptions(source, medium, campaign, amp, _package, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current account
     * @summary 
     * @param {string} [source] 
     * @param {string} [medium] 
     * @param {string} [campaign] 
     * @param {string} [amp] 
     * @param {string} [_package] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudAutodiscoveryApi
     */
    public meCloudAutodiscoveryControllerGetAccount(source?: string, medium?: string, campaign?: string, amp?: string, _package?: string, options?: RawAxiosRequestConfig) {
        return CloudAutodiscoveryApiFp(this.configuration).meCloudAutodiscoveryControllerGetAccount(source, medium, campaign, amp, _package, options).then((request) => request(this.axios, this.basePath));
    }
}

