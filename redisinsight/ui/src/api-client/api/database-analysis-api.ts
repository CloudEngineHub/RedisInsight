/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateDatabaseAnalysisDto } from '../models';
// @ts-ignore
import type { DatabaseAnalysis } from '../models';
// @ts-ignore
import type { RecommendationVoteDto } from '../models';
// @ts-ignore
import type { ShortDatabaseAnalysis } from '../models';
/**
 * DatabaseAnalysisApi - axios parameter creator
 * @export
 */
export const DatabaseAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new database analysis
         * @summary 
         * @param {string} dbInstance 
         * @param {DatabaseAnalysisControllerCreateEncodingEnum} encoding 
         * @param {CreateDatabaseAnalysisDto} createDatabaseAnalysisDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerCreate: async (dbInstance: string, encoding: DatabaseAnalysisControllerCreateEncodingEnum, createDatabaseAnalysisDto: CreateDatabaseAnalysisDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseAnalysisControllerCreate', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('databaseAnalysisControllerCreate', 'encoding', encoding)
            // verify required parameter 'createDatabaseAnalysisDto' is not null or undefined
            assertParamExists('databaseAnalysisControllerCreate', 'createDatabaseAnalysisDto', createDatabaseAnalysisDto)
            const localVarPath = `/api/databases/{dbInstance}/analysis`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDatabaseAnalysisDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database analysis
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerGetEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerGet: async (id: string, dbInstance: string, encoding: DatabaseAnalysisControllerGetEncodingEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseAnalysisControllerGet', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseAnalysisControllerGet', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('databaseAnalysisControllerGet', 'encoding', encoding)
            const localVarPath = `/api/databases/{dbInstance}/analysis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database analysis list
         * @summary 
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerListEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerList: async (dbInstance: string, encoding: DatabaseAnalysisControllerListEncodingEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseAnalysisControllerList', 'dbInstance', dbInstance)
            // verify required parameter 'encoding' is not null or undefined
            assertParamExists('databaseAnalysisControllerList', 'encoding', encoding)
            const localVarPath = `/api/databases/{dbInstance}/analysis`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update database analysis by id
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {RecommendationVoteDto} recommendationVoteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerModify: async (id: string, dbInstance: string, recommendationVoteDto: RecommendationVoteDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseAnalysisControllerModify', 'id', id)
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('databaseAnalysisControllerModify', 'dbInstance', dbInstance)
            // verify required parameter 'recommendationVoteDto' is not null or undefined
            assertParamExists('databaseAnalysisControllerModify', 'recommendationVoteDto', recommendationVoteDto)
            const localVarPath = `/api/databases/{dbInstance}/analysis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recommendationVoteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseAnalysisApi - functional programming interface
 * @export
 */
export const DatabaseAnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseAnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new database analysis
         * @summary 
         * @param {string} dbInstance 
         * @param {DatabaseAnalysisControllerCreateEncodingEnum} encoding 
         * @param {CreateDatabaseAnalysisDto} createDatabaseAnalysisDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseAnalysisControllerCreate(dbInstance: string, encoding: DatabaseAnalysisControllerCreateEncodingEnum, createDatabaseAnalysisDto: CreateDatabaseAnalysisDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseAnalysis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseAnalysisControllerCreate(dbInstance, encoding, createDatabaseAnalysisDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseAnalysisApi.databaseAnalysisControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get database analysis
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerGetEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseAnalysisControllerGet(id: string, dbInstance: string, encoding: DatabaseAnalysisControllerGetEncodingEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseAnalysis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseAnalysisControllerGet(id, dbInstance, encoding, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseAnalysisApi.databaseAnalysisControllerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get database analysis list
         * @summary 
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerListEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseAnalysisControllerList(dbInstance: string, encoding: DatabaseAnalysisControllerListEncodingEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortDatabaseAnalysis>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseAnalysisControllerList(dbInstance, encoding, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseAnalysisApi.databaseAnalysisControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update database analysis by id
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {RecommendationVoteDto} recommendationVoteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseAnalysisControllerModify(id: string, dbInstance: string, recommendationVoteDto: RecommendationVoteDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseAnalysis>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseAnalysisControllerModify(id, dbInstance, recommendationVoteDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseAnalysisApi.databaseAnalysisControllerModify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DatabaseAnalysisApi - factory interface
 * @export
 */
export const DatabaseAnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseAnalysisApiFp(configuration)
    return {
        /**
         * Create new database analysis
         * @summary 
         * @param {string} dbInstance 
         * @param {DatabaseAnalysisControllerCreateEncodingEnum} encoding 
         * @param {CreateDatabaseAnalysisDto} createDatabaseAnalysisDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerCreate(dbInstance: string, encoding: DatabaseAnalysisControllerCreateEncodingEnum, createDatabaseAnalysisDto: CreateDatabaseAnalysisDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseAnalysis> {
            return localVarFp.databaseAnalysisControllerCreate(dbInstance, encoding, createDatabaseAnalysisDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database analysis
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerGetEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerGet(id: string, dbInstance: string, encoding: DatabaseAnalysisControllerGetEncodingEnum, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseAnalysis> {
            return localVarFp.databaseAnalysisControllerGet(id, dbInstance, encoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database analysis list
         * @summary 
         * @param {string} dbInstance Database instance id
         * @param {DatabaseAnalysisControllerListEncodingEnum} encoding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerList(dbInstance: string, encoding: DatabaseAnalysisControllerListEncodingEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ShortDatabaseAnalysis>> {
            return localVarFp.databaseAnalysisControllerList(dbInstance, encoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Update database analysis by id
         * @summary 
         * @param {string} id Analysis id
         * @param {string} dbInstance Database instance id
         * @param {RecommendationVoteDto} recommendationVoteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseAnalysisControllerModify(id: string, dbInstance: string, recommendationVoteDto: RecommendationVoteDto, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseAnalysis> {
            return localVarFp.databaseAnalysisControllerModify(id, dbInstance, recommendationVoteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseAnalysisApi - object-oriented interface
 * @export
 * @class DatabaseAnalysisApi
 * @extends {BaseAPI}
 */
export class DatabaseAnalysisApi extends BaseAPI {
    /**
     * Create new database analysis
     * @summary 
     * @param {string} dbInstance 
     * @param {DatabaseAnalysisControllerCreateEncodingEnum} encoding 
     * @param {CreateDatabaseAnalysisDto} createDatabaseAnalysisDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseAnalysisApi
     */
    public databaseAnalysisControllerCreate(dbInstance: string, encoding: DatabaseAnalysisControllerCreateEncodingEnum, createDatabaseAnalysisDto: CreateDatabaseAnalysisDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return DatabaseAnalysisApiFp(this.configuration).databaseAnalysisControllerCreate(dbInstance, encoding, createDatabaseAnalysisDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get database analysis
     * @summary 
     * @param {string} id Analysis id
     * @param {string} dbInstance Database instance id
     * @param {DatabaseAnalysisControllerGetEncodingEnum} encoding 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseAnalysisApi
     */
    public databaseAnalysisControllerGet(id: string, dbInstance: string, encoding: DatabaseAnalysisControllerGetEncodingEnum, options?: RawAxiosRequestConfig) {
        return DatabaseAnalysisApiFp(this.configuration).databaseAnalysisControllerGet(id, dbInstance, encoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get database analysis list
     * @summary 
     * @param {string} dbInstance Database instance id
     * @param {DatabaseAnalysisControllerListEncodingEnum} encoding 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseAnalysisApi
     */
    public databaseAnalysisControllerList(dbInstance: string, encoding: DatabaseAnalysisControllerListEncodingEnum, options?: RawAxiosRequestConfig) {
        return DatabaseAnalysisApiFp(this.configuration).databaseAnalysisControllerList(dbInstance, encoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update database analysis by id
     * @summary 
     * @param {string} id Analysis id
     * @param {string} dbInstance Database instance id
     * @param {RecommendationVoteDto} recommendationVoteDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseAnalysisApi
     */
    public databaseAnalysisControllerModify(id: string, dbInstance: string, recommendationVoteDto: RecommendationVoteDto, options?: RawAxiosRequestConfig) {
        return DatabaseAnalysisApiFp(this.configuration).databaseAnalysisControllerModify(id, dbInstance, recommendationVoteDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DatabaseAnalysisControllerCreateEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type DatabaseAnalysisControllerCreateEncodingEnum = typeof DatabaseAnalysisControllerCreateEncodingEnum[keyof typeof DatabaseAnalysisControllerCreateEncodingEnum];
/**
 * @export
 */
export const DatabaseAnalysisControllerGetEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type DatabaseAnalysisControllerGetEncodingEnum = typeof DatabaseAnalysisControllerGetEncodingEnum[keyof typeof DatabaseAnalysisControllerGetEncodingEnum];
/**
 * @export
 */
export const DatabaseAnalysisControllerListEncodingEnum = {
    Utf8: 'utf8',
    Ascii: 'ascii',
    Buffer: 'buffer'
} as const;
export type DatabaseAnalysisControllerListEncodingEnum = typeof DatabaseAnalysisControllerListEncodingEnum[keyof typeof DatabaseAnalysisControllerListEncodingEnum];
