/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AiChat } from '../models';
// @ts-ignore
import type { PickTypeClass } from '../models';
// @ts-ignore
import type { SendAiChatMessageDto } from '../models';
// @ts-ignore
import type { SendAiQueryMessageDto } from '../models';
/**
 * AIApi - axios parameter creator
 * @export
 */
export const AIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new chat
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ai/assistant/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset chat
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiChatControllerDelete', 'id', id)
            const localVarPath = `/api/ai/assistant/chats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get chat history
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerGetHistory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiChatControllerGetHistory', 'id', id)
            const localVarPath = `/api/ai/assistant/chats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a message
         * @summary 
         * @param {string} id 
         * @param {SendAiChatMessageDto} sendAiChatMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerPostMessage: async (id: string, sendAiChatMessageDto: SendAiChatMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiChatControllerPostMessage', 'id', id)
            // verify required parameter 'sendAiChatMessageDto' is not null or undefined
            assertParamExists('aiChatControllerPostMessage', 'sendAiChatMessageDto', sendAiChatMessageDto)
            const localVarPath = `/api/ai/assistant/chats/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendAiChatMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerClearHistory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiQueryControllerClearHistory', 'id', id)
            const localVarPath = `/api/ai/expert/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerGetHistory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiQueryControllerGetHistory', 'id', id)
            const localVarPath = `/api/ai/expert/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {SendAiQueryMessageDto} sendAiQueryMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerStreamQuestion: async (id: string, sendAiQueryMessageDto: SendAiQueryMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('aiQueryControllerStreamQuestion', 'id', id)
            // verify required parameter 'sendAiQueryMessageDto' is not null or undefined
            assertParamExists('aiQueryControllerStreamQuestion', 'sendAiQueryMessageDto', sendAiQueryMessageDto)
            const localVarPath = `/api/ai/expert/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendAiQueryMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AIApi - functional programming interface
 * @export
 */
export const AIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AIApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new chat
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChatControllerCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickTypeClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiChatControllerCreate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiChatControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset chat
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChatControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiChatControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiChatControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get chat history
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChatControllerGetHistory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiChat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiChatControllerGetHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiChatControllerGetHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a message
         * @summary 
         * @param {string} id 
         * @param {SendAiChatMessageDto} sendAiChatMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiChatControllerPostMessage(id: string, sendAiChatMessageDto: SendAiChatMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiChatControllerPostMessage(id, sendAiChatMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiChatControllerPostMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiQueryControllerClearHistory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiQueryControllerClearHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiQueryControllerClearHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiQueryControllerGetHistory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiQueryControllerGetHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiQueryControllerGetHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {SendAiQueryMessageDto} sendAiQueryMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aiQueryControllerStreamQuestion(id: string, sendAiQueryMessageDto: SendAiQueryMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aiQueryControllerStreamQuestion(id, sendAiQueryMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIApi.aiQueryControllerStreamQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AIApi - factory interface
 * @export
 */
export const AIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AIApiFp(configuration)
    return {
        /**
         * Create a new chat
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerCreate(options?: RawAxiosRequestConfig): AxiosPromise<PickTypeClass> {
            return localVarFp.aiChatControllerCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Reset chat
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.aiChatControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get chat history
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerGetHistory(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AiChat> {
            return localVarFp.aiChatControllerGetHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a message
         * @summary 
         * @param {string} id 
         * @param {SendAiChatMessageDto} sendAiChatMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiChatControllerPostMessage(id: string, sendAiChatMessageDto: SendAiChatMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.aiChatControllerPostMessage(id, sendAiChatMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerClearHistory(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.aiQueryControllerClearHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerGetHistory(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.aiQueryControllerGetHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate new query
         * @summary 
         * @param {string} id 
         * @param {SendAiQueryMessageDto} sendAiQueryMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aiQueryControllerStreamQuestion(id: string, sendAiQueryMessageDto: SendAiQueryMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.aiQueryControllerStreamQuestion(id, sendAiQueryMessageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AIApi - object-oriented interface
 * @export
 * @class AIApi
 * @extends {BaseAPI}
 */
export class AIApi extends BaseAPI {
    /**
     * Create a new chat
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiChatControllerCreate(options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiChatControllerCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset chat
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiChatControllerDelete(id: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiChatControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get chat history
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiChatControllerGetHistory(id: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiChatControllerGetHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a message
     * @summary 
     * @param {string} id 
     * @param {SendAiChatMessageDto} sendAiChatMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiChatControllerPostMessage(id: string, sendAiChatMessageDto: SendAiChatMessageDto, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiChatControllerPostMessage(id, sendAiChatMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate new query
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiQueryControllerClearHistory(id: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiQueryControllerClearHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate new query
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiQueryControllerGetHistory(id: string, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiQueryControllerGetHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate new query
     * @summary 
     * @param {string} id 
     * @param {SendAiQueryMessageDto} sendAiQueryMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    public aiQueryControllerStreamQuestion(id: string, sendAiQueryMessageDto: SendAiQueryMessageDto, options?: RawAxiosRequestConfig) {
        return AIApiFp(this.configuration).aiQueryControllerStreamQuestion(id, sendAiQueryMessageDto, options).then((request) => request(this.axios, this.basePath));
    }
}

