/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateDatabaseDto } from '../models';
// @ts-ignore
import type { Database } from '../models';
// @ts-ignore
import type { DatabaseImportResponse } from '../models';
// @ts-ignore
import type { DatabaseResponse } from '../models';
// @ts-ignore
import type { DeleteDatabasesDto } from '../models';
// @ts-ignore
import type { ExportDatabase } from '../models';
// @ts-ignore
import type { ExportDatabasesDto } from '../models';
// @ts-ignore
import type { UpdateDatabaseDto } from '../models';
/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete many databases by ids
         * @summary 
         * @param {DeleteDatabasesDto} deleteDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerBulkDeleteDatabaseInstance: async (deleteDatabasesDto: DeleteDatabasesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteDatabasesDto' is not null or undefined
            assertParamExists('databaseControllerBulkDeleteDatabaseInstance', 'deleteDatabasesDto', deleteDatabasesDto)
            const localVarPath = `/api/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerClone: async (id: string, updateDatabaseDto: UpdateDatabaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerClone', 'id', id)
            // verify required parameter 'updateDatabaseDto' is not null or undefined
            assertParamExists('databaseControllerClone', 'updateDatabaseDto', updateDatabaseDto)
            const localVarPath = `/api/databases/clone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDatabaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect to database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerConnect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerConnect', 'id', id)
            const localVarPath = `/api/databases/{id}/connect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add database instance
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerCreate: async (createDatabaseDto: CreateDatabaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDatabaseDto' is not null or undefined
            assertParamExists('databaseControllerCreate', 'createDatabaseDto', createDatabaseDto)
            const localVarPath = `/api/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDatabaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerDeleteDatabaseInstance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerDeleteDatabaseInstance', 'id', id)
            const localVarPath = `/api/databases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export many databases by ids. With or without passwords and certificates bodies.
         * @summary 
         * @param {ExportDatabasesDto} exportDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerExportConnections: async (exportDatabasesDto: ExportDatabasesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportDatabasesDto' is not null or undefined
            assertParamExists('databaseControllerExportConnections', 'exportDatabasesDto', exportDatabasesDto)
            const localVarPath = `/api/databases/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportDatabasesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerGet', 'id', id)
            const localVarPath = `/api/databases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get databases list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test connection
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerTestConnection: async (createDatabaseDto: CreateDatabaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDatabaseDto' is not null or undefined
            assertParamExists('databaseControllerTestConnection', 'createDatabaseDto', createDatabaseDto)
            const localVarPath = `/api/databases/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDatabaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test connection
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerTestExistConnection: async (id: string, updateDatabaseDto: UpdateDatabaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerTestExistConnection', 'id', id)
            // verify required parameter 'updateDatabaseDto' is not null or undefined
            assertParamExists('databaseControllerTestExistConnection', 'updateDatabaseDto', updateDatabaseDto)
            const localVarPath = `/api/databases/test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDatabaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerUpdate: async (id: string, updateDatabaseDto: UpdateDatabaseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('databaseControllerUpdate', 'id', id)
            // verify required parameter 'updateDatabaseDto' is not null or undefined
            assertParamExists('databaseControllerUpdate', 'updateDatabaseDto', updateDatabaseDto)
            const localVarPath = `/api/databases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDatabaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseImportControllerImport: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/databases/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete many databases by ids
         * @summary 
         * @param {DeleteDatabasesDto} deleteDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto: DeleteDatabasesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDatabasesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerBulkDeleteDatabaseInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerClone(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerClone(id, updateDatabaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerClone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Connect to database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerConnect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerConnect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerConnect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add database instance
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerCreate(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerCreate(createDatabaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerDeleteDatabaseInstance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerDeleteDatabaseInstance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerDeleteDatabaseInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export many databases by ids. With or without passwords and certificates bodies.
         * @summary 
         * @param {ExportDatabasesDto} exportDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerExportConnections(exportDatabasesDto: ExportDatabasesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportDatabase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerExportConnections(exportDatabasesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerExportConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get databases list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Database>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test connection
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerTestConnection(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerTestConnection(createDatabaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerTestConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test connection
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerTestExistConnection(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerTestExistConnection(id, updateDatabaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerTestExistConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseControllerUpdate(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseControllerUpdate(id, updateDatabaseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async databaseImportControllerImport(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseImportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.databaseImportControllerImport(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DatabaseApi.databaseImportControllerImport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseApiFp(configuration)
    return {
        /**
         * Delete many databases by ids
         * @summary 
         * @param {DeleteDatabasesDto} deleteDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto: DeleteDatabasesDto, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDatabasesDto> {
            return localVarFp.databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerClone(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseResponse> {
            return localVarFp.databaseControllerClone(id, updateDatabaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect to database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerConnect(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseControllerConnect(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Add database instance
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerCreate(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseResponse> {
            return localVarFp.databaseControllerCreate(createDatabaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerDeleteDatabaseInstance(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseControllerDeleteDatabaseInstance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Export many databases by ids. With or without passwords and certificates bodies.
         * @summary 
         * @param {ExportDatabasesDto} exportDatabasesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerExportConnections(exportDatabasesDto: ExportDatabasesDto, options?: RawAxiosRequestConfig): AxiosPromise<ExportDatabase> {
            return localVarFp.databaseControllerExportConnections(exportDatabasesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get database instance by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseResponse> {
            return localVarFp.databaseControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get databases list
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Database>> {
            return localVarFp.databaseControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * Test connection
         * @summary 
         * @param {CreateDatabaseDto} createDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerTestConnection(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseControllerTestConnection(createDatabaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Test connection
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerTestExistConnection(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.databaseControllerTestExistConnection(id, updateDatabaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update database instance by id
         * @summary 
         * @param {string} id 
         * @param {UpdateDatabaseDto} updateDatabaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseControllerUpdate(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseResponse> {
            return localVarFp.databaseControllerUpdate(id, updateDatabaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        databaseImportControllerImport(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<DatabaseImportResponse> {
            return localVarFp.databaseImportControllerImport(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export class DatabaseApi extends BaseAPI {
    /**
     * Delete many databases by ids
     * @summary 
     * @param {DeleteDatabasesDto} deleteDatabasesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto: DeleteDatabasesDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerBulkDeleteDatabaseInstance(deleteDatabasesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update database instance by id
     * @summary 
     * @param {string} id 
     * @param {UpdateDatabaseDto} updateDatabaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerClone(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerClone(id, updateDatabaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect to database instance by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerConnect(id: string, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerConnect(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add database instance
     * @summary 
     * @param {CreateDatabaseDto} createDatabaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerCreate(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerCreate(createDatabaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete database instance by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerDeleteDatabaseInstance(id: string, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerDeleteDatabaseInstance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export many databases by ids. With or without passwords and certificates bodies.
     * @summary 
     * @param {ExportDatabasesDto} exportDatabasesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerExportConnections(exportDatabasesDto: ExportDatabasesDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerExportConnections(exportDatabasesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get database instance by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerGet(id: string, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get databases list
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerList(options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test connection
     * @summary 
     * @param {CreateDatabaseDto} createDatabaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerTestConnection(createDatabaseDto: CreateDatabaseDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerTestConnection(createDatabaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test connection
     * @summary 
     * @param {string} id 
     * @param {UpdateDatabaseDto} updateDatabaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerTestExistConnection(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerTestExistConnection(id, updateDatabaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update database instance by id
     * @summary 
     * @param {string} id 
     * @param {UpdateDatabaseDto} updateDatabaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseControllerUpdate(id: string, updateDatabaseDto: UpdateDatabaseDto, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseControllerUpdate(id, updateDatabaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public databaseImportControllerImport(file?: File, options?: RawAxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).databaseImportControllerImport(file, options).then((request) => request(this.axios, this.basePath));
    }
}

