/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UploadImportFileByPathDto } from '../models';
/**
 * BulkActionsApi - axios parameter creator
 * @export
 */
export const BulkActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Import data from file
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerImport: async (dbInstance: string, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('bulkImportControllerImport', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/bulk-actions/import`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import default data
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerImportDefaultData: async (dbInstance: string, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('bulkImportControllerImportDefaultData', 'dbInstance', dbInstance)
            const localVarPath = `/api/databases/{dbInstance}/bulk-actions/import/default-data`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import data from tutorial by path
         * @summary 
         * @param {string} dbInstance 
         * @param {UploadImportFileByPathDto} uploadImportFileByPathDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerUploadFromTutorial: async (dbInstance: string, uploadImportFileByPathDto: UploadImportFileByPathDto, riDbIndex?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbInstance' is not null or undefined
            assertParamExists('bulkImportControllerUploadFromTutorial', 'dbInstance', dbInstance)
            // verify required parameter 'uploadImportFileByPathDto' is not null or undefined
            assertParamExists('bulkImportControllerUploadFromTutorial', 'uploadImportFileByPathDto', uploadImportFileByPathDto)
            const localVarPath = `/api/databases/{dbInstance}/bulk-actions/import/tutorial-data`
                .replace(`{${"dbInstance"}}`, encodeURIComponent(String(dbInstance)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (riDbIndex != null) {
                localVarHeaderParameter['ri-db-index'] = typeof riDbIndex === 'string'
                    ? riDbIndex
                    : JSON.stringify(riDbIndex);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadImportFileByPathDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkActionsApi - functional programming interface
 * @export
 */
export const BulkActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Import data from file
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkImportControllerImport(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkImportControllerImport(dbInstance, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkActionsApi.bulkImportControllerImport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Import default data
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkImportControllerImportDefaultData(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkImportControllerImportDefaultData(dbInstance, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkActionsApi.bulkImportControllerImportDefaultData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Import data from tutorial by path
         * @summary 
         * @param {string} dbInstance 
         * @param {UploadImportFileByPathDto} uploadImportFileByPathDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkImportControllerUploadFromTutorial(dbInstance: string, uploadImportFileByPathDto: UploadImportFileByPathDto, riDbIndex?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkImportControllerUploadFromTutorial(dbInstance, uploadImportFileByPathDto, riDbIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BulkActionsApi.bulkImportControllerUploadFromTutorial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BulkActionsApi - factory interface
 * @export
 */
export const BulkActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkActionsApiFp(configuration)
    return {
        /**
         * Import data from file
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerImport(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.bulkImportControllerImport(dbInstance, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Import default data
         * @summary 
         * @param {string} dbInstance 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerImportDefaultData(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.bulkImportControllerImportDefaultData(dbInstance, riDbIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Import data from tutorial by path
         * @summary 
         * @param {string} dbInstance 
         * @param {UploadImportFileByPathDto} uploadImportFileByPathDto 
         * @param {number} [riDbIndex] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkImportControllerUploadFromTutorial(dbInstance: string, uploadImportFileByPathDto: UploadImportFileByPathDto, riDbIndex?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.bulkImportControllerUploadFromTutorial(dbInstance, uploadImportFileByPathDto, riDbIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BulkActionsApi - object-oriented interface
 * @export
 * @class BulkActionsApi
 * @extends {BaseAPI}
 */
export class BulkActionsApi extends BaseAPI {
    /**
     * Import data from file
     * @summary 
     * @param {string} dbInstance 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkActionsApi
     */
    public bulkImportControllerImport(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BulkActionsApiFp(this.configuration).bulkImportControllerImport(dbInstance, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import default data
     * @summary 
     * @param {string} dbInstance 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkActionsApi
     */
    public bulkImportControllerImportDefaultData(dbInstance: string, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BulkActionsApiFp(this.configuration).bulkImportControllerImportDefaultData(dbInstance, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import data from tutorial by path
     * @summary 
     * @param {string} dbInstance 
     * @param {UploadImportFileByPathDto} uploadImportFileByPathDto 
     * @param {number} [riDbIndex] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkActionsApi
     */
    public bulkImportControllerUploadFromTutorial(dbInstance: string, uploadImportFileByPathDto: UploadImportFileByPathDto, riDbIndex?: number, options?: RawAxiosRequestConfig) {
        return BulkActionsApiFp(this.configuration).bulkImportControllerUploadFromTutorial(dbInstance, uploadImportFileByPathDto, riDbIndex, options).then((request) => request(this.axios, this.basePath));
    }
}

