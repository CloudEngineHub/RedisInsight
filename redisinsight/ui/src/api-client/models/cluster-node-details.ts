/* tslint:disable */
/* eslint-disable */
/**
 * Redis Insight Backend API
 * Redis Insight Backend API
 *
 * The version of the OpenAPI document: 2.70.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface ClusterNodeDetails
 */
export interface ClusterNodeDetails {
    /**
     * Node id
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'id': string;
    /**
     * Redis version
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'version': string;
    /**
     * Redis mode
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'mode': string;
    /**
     * Node IP address
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'host': string;
    /**
     * Node IP address
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'port': number;
    /**
     * Node role in cluster
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'role': ClusterNodeDetailsRoleEnum;
    /**
     * ID of primary node (for replica only)
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'primary'?: string;
    /**
     * Node\'s current health status
     * @type {string}
     * @memberof ClusterNodeDetails
     */
    'health': ClusterNodeDetailsHealthEnum;
    /**
     * Array of assigned slots or slots ranges. Shown for primary nodes only
     * @type {Array<string>}
     * @memberof ClusterNodeDetails
     */
    'slots'?: Array<string>;
    /**
     * Total keys stored inside this node
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'totalKeys': number;
    /**
     * Memory used by node. \"memory.used_memory\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'usedMemory': number;
    /**
     * Current operations per second. \"stats.instantaneous_ops_per_sec\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'opsPerSecond': number;
    /**
     * Total connections received by node. \"stats.total_connections_received\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'connectionsReceived': number;
    /**
     * Currently connected clients. \"clients.connected_clients\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'connectedClients': number;
    /**
     * Total commands processed by node. \"stats.total_commands_processed\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'commandsProcessed': number;
    /**
     * Current input network usage in KB/s. \"stats.instantaneous_input_kbps\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'networkInKbps': number;
    /**
     * Current output network usage in KB/s. \"stats.instantaneous_output_kbps\" from INFO command
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'networkOutKbps': number;
    /**
     * Ratio for cache hits and misses [0 - 1]. Ideally should be close to 1
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'cacheHitRatio'?: number;
    /**
     * The replication offset of this node. This information can be used to send commands to the most up to date replicas.
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'replicationOffset': number;
    /**
     * For replicas only. Determines on how much replica is behind of primary.
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'replicationLag'?: number;
    /**
     * Current node uptime_in_seconds
     * @type {number}
     * @memberof ClusterNodeDetails
     */
    'uptimeSec': number;
    /**
     * For primary nodes only. Replica node(s) details
     * @type {Array<ClusterNodeDetails>}
     * @memberof ClusterNodeDetails
     */
    'replicas'?: Array<ClusterNodeDetails>;
}

export const ClusterNodeDetailsRoleEnum = {
    Primary: 'primary',
    Replica: 'replica'
} as const;

export type ClusterNodeDetailsRoleEnum = typeof ClusterNodeDetailsRoleEnum[keyof typeof ClusterNodeDetailsRoleEnum];
export const ClusterNodeDetailsHealthEnum = {
    Online: 'online',
    Offline: 'offline',
    Loading: 'loading'
} as const;

export type ClusterNodeDetailsHealthEnum = typeof ClusterNodeDetailsHealthEnum[keyof typeof ClusterNodeDetailsHealthEnum];


