name: Install Dependencies action
description: Caches and installs dependencies for a given path
inputs:
  dir-path:
    description: Path to the directory
    required: true
  keytar-host-mirror:
    description: Keytar binary host mirror
    required: false
  sqlite3-host-mirror:
    description: SQLite3 binary host mirror
    required: false
  skip-postinstall:
    description: Skip postinstall
    required: false
    default: '0'

runs:
  using: 'composite'
  steps:
    - name: Check if caching should be enabled
      id: should-cache
      shell: bash
      run: |
        # Enable caching for PR branches: fe/, be/, fe-be/, feature/, bugfix/
        # Skip caching for: ric/, latest, and other release branches
        if [[ "${{ github.ref_name }}" =~ ^(fe|be|fe-be|feature|bugfix)/ ]]; then
          echo "enabled=true" >> $GITHUB_OUTPUT
          echo "üöÄ Caching enabled for branch: ${{ github.ref_name }}"
        else
          echo "enabled=false" >> $GITHUB_OUTPUT
          echo "‚ö° Caching disabled for branch: ${{ github.ref_name }}"
        fi

    - name: Generate cache key
      if: steps.should-cache.outputs.enabled == 'true'
      id: cache-key
      shell: bash
      run: |
        if [ "${{ inputs.dir-path }}" = "./" ]; then
          LOCK_FILE="yarn.lock"
          PKG_FILE="package.json"
        else
          LOCK_FILE="${{ inputs.dir-path }}/yarn.lock"
          PKG_FILE="${{ inputs.dir-path }}/package.json"
        fi
        echo "lock-file=$LOCK_FILE" >> $GITHUB_OUTPUT
        echo "pkg-file=$PKG_FILE" >> $GITHUB_OUTPUT

    - name: Cache Yarn dependencies
      if: steps.should-cache.outputs.enabled == 'true'
      id: yarn-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          ${{ inputs.dir-path }}/node_modules
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ inputs.dir-path }}-${{ hashFiles(steps.cache-key.outputs.lock-file, steps.cache-key.outputs.pkg-file) }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ inputs.dir-path }}-
          ${{ runner.os }}-yarn-

    - name: Check cache status
      if: steps.should-cache.outputs.enabled == 'true'
      shell: bash
      run: |
        if [ "${{ steps.yarn-cache.outputs.cache-hit }}" = "true" ]; then
          echo "üéØ Cache HIT for ${{ inputs.dir-path }} - dependencies restored from cache"
        else
          echo "‚ùå Cache MISS for ${{ inputs.dir-path }} - will install dependencies"
        fi

    - name: Install dependencies
      working-directory: ${{ inputs.dir-path }}
      shell: bash
      run: |
        # todo: uncomment after build our binaries
        # export npm_config_keytar_binary_host_mirror=${{ inputs.keytar-host-mirror }}
        # export npm_config_node_sqlite3_binary_host_mirror=${{ inputs.sqlite3-host-mirror }}

        yarn install --frozen-lockfile --network-timeout 1000000
